// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eGroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eGroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eGroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eGroup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eGroup_2eproto;
namespace IM {
namespace Group {
class IMGroupChangeMemberNotify;
struct IMGroupChangeMemberNotifyDefaultTypeInternal;
extern IMGroupChangeMemberNotifyDefaultTypeInternal _IMGroupChangeMemberNotify_default_instance_;
class IMGroupChangeMemberReq;
struct IMGroupChangeMemberReqDefaultTypeInternal;
extern IMGroupChangeMemberReqDefaultTypeInternal _IMGroupChangeMemberReq_default_instance_;
class IMGroupChangeMemberRsp;
struct IMGroupChangeMemberRspDefaultTypeInternal;
extern IMGroupChangeMemberRspDefaultTypeInternal _IMGroupChangeMemberRsp_default_instance_;
class IMGroupCreateReq;
struct IMGroupCreateReqDefaultTypeInternal;
extern IMGroupCreateReqDefaultTypeInternal _IMGroupCreateReq_default_instance_;
class IMGroupCreateRsp;
struct IMGroupCreateRspDefaultTypeInternal;
extern IMGroupCreateRspDefaultTypeInternal _IMGroupCreateRsp_default_instance_;
class IMGroupInfoListReq;
struct IMGroupInfoListReqDefaultTypeInternal;
extern IMGroupInfoListReqDefaultTypeInternal _IMGroupInfoListReq_default_instance_;
class IMGroupInfoListRsp;
struct IMGroupInfoListRspDefaultTypeInternal;
extern IMGroupInfoListRspDefaultTypeInternal _IMGroupInfoListRsp_default_instance_;
class IMGroupShieldReq;
struct IMGroupShieldReqDefaultTypeInternal;
extern IMGroupShieldReqDefaultTypeInternal _IMGroupShieldReq_default_instance_;
class IMGroupShieldRsp;
struct IMGroupShieldRspDefaultTypeInternal;
extern IMGroupShieldRspDefaultTypeInternal _IMGroupShieldRsp_default_instance_;
class IMNormalGroupListReq;
struct IMNormalGroupListReqDefaultTypeInternal;
extern IMNormalGroupListReqDefaultTypeInternal _IMNormalGroupListReq_default_instance_;
class IMNormalGroupListRsp;
struct IMNormalGroupListRspDefaultTypeInternal;
extern IMNormalGroupListRspDefaultTypeInternal _IMNormalGroupListRsp_default_instance_;
}  // namespace Group
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Group::IMGroupChangeMemberNotify* Arena::CreateMaybeMessage<::IM::Group::IMGroupChangeMemberNotify>(Arena*);
template<> ::IM::Group::IMGroupChangeMemberReq* Arena::CreateMaybeMessage<::IM::Group::IMGroupChangeMemberReq>(Arena*);
template<> ::IM::Group::IMGroupChangeMemberRsp* Arena::CreateMaybeMessage<::IM::Group::IMGroupChangeMemberRsp>(Arena*);
template<> ::IM::Group::IMGroupCreateReq* Arena::CreateMaybeMessage<::IM::Group::IMGroupCreateReq>(Arena*);
template<> ::IM::Group::IMGroupCreateRsp* Arena::CreateMaybeMessage<::IM::Group::IMGroupCreateRsp>(Arena*);
template<> ::IM::Group::IMGroupInfoListReq* Arena::CreateMaybeMessage<::IM::Group::IMGroupInfoListReq>(Arena*);
template<> ::IM::Group::IMGroupInfoListRsp* Arena::CreateMaybeMessage<::IM::Group::IMGroupInfoListRsp>(Arena*);
template<> ::IM::Group::IMGroupShieldReq* Arena::CreateMaybeMessage<::IM::Group::IMGroupShieldReq>(Arena*);
template<> ::IM::Group::IMGroupShieldRsp* Arena::CreateMaybeMessage<::IM::Group::IMGroupShieldRsp>(Arena*);
template<> ::IM::Group::IMNormalGroupListReq* Arena::CreateMaybeMessage<::IM::Group::IMNormalGroupListReq>(Arena*);
template<> ::IM::Group::IMNormalGroupListRsp* Arena::CreateMaybeMessage<::IM::Group::IMNormalGroupListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Group {

// ===================================================================

class IMNormalGroupListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMNormalGroupListReq) */ {
 public:
  inline IMNormalGroupListReq() : IMNormalGroupListReq(nullptr) {}
  ~IMNormalGroupListReq() override;
  explicit constexpr IMNormalGroupListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMNormalGroupListReq(const IMNormalGroupListReq& from);
  IMNormalGroupListReq(IMNormalGroupListReq&& from) noexcept
    : IMNormalGroupListReq() {
    *this = ::std::move(from);
  }

  inline IMNormalGroupListReq& operator=(const IMNormalGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMNormalGroupListReq& operator=(IMNormalGroupListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMNormalGroupListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMNormalGroupListReq* internal_default_instance() {
    return reinterpret_cast<const IMNormalGroupListReq*>(
               &_IMNormalGroupListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMNormalGroupListReq& a, IMNormalGroupListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMNormalGroupListReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMNormalGroupListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMNormalGroupListReq* New() const final {
    return new IMNormalGroupListReq();
  }

  IMNormalGroupListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMNormalGroupListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMNormalGroupListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMNormalGroupListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMNormalGroupListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMNormalGroupListReq";
  }
  protected:
  explicit IMNormalGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMNormalGroupListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMNormalGroupListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMNormalGroupListRsp) */ {
 public:
  inline IMNormalGroupListRsp() : IMNormalGroupListRsp(nullptr) {}
  ~IMNormalGroupListRsp() override;
  explicit constexpr IMNormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMNormalGroupListRsp(const IMNormalGroupListRsp& from);
  IMNormalGroupListRsp(IMNormalGroupListRsp&& from) noexcept
    : IMNormalGroupListRsp() {
    *this = ::std::move(from);
  }

  inline IMNormalGroupListRsp& operator=(const IMNormalGroupListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMNormalGroupListRsp& operator=(IMNormalGroupListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMNormalGroupListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMNormalGroupListRsp* internal_default_instance() {
    return reinterpret_cast<const IMNormalGroupListRsp*>(
               &_IMNormalGroupListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMNormalGroupListRsp& a, IMNormalGroupListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMNormalGroupListRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMNormalGroupListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMNormalGroupListRsp* New() const final {
    return new IMNormalGroupListRsp();
  }

  IMNormalGroupListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMNormalGroupListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMNormalGroupListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMNormalGroupListRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMNormalGroupListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMNormalGroupListRsp";
  }
  protected:
  explicit IMNormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupVersionListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  int group_version_list_size() const;
  private:
  int _internal_group_version_list_size() const;
  public:
  void clear_group_version_list();
  ::IM::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();
  private:
  const ::IM::BaseDefine::GroupVersionInfo& _internal_group_version_list(int index) const;
  ::IM::BaseDefine::GroupVersionInfo* _internal_add_group_version_list();
  public:
  const ::IM::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  ::IM::BaseDefine::GroupVersionInfo* add_group_version_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
      group_version_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMNormalGroupListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo > group_version_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupInfoListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupInfoListReq) */ {
 public:
  inline IMGroupInfoListReq() : IMGroupInfoListReq(nullptr) {}
  ~IMGroupInfoListReq() override;
  explicit constexpr IMGroupInfoListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupInfoListReq(const IMGroupInfoListReq& from);
  IMGroupInfoListReq(IMGroupInfoListReq&& from) noexcept
    : IMGroupInfoListReq() {
    *this = ::std::move(from);
  }

  inline IMGroupInfoListReq& operator=(const IMGroupInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupInfoListReq& operator=(IMGroupInfoListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupInfoListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupInfoListReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupInfoListReq*>(
               &_IMGroupInfoListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMGroupInfoListReq& a, IMGroupInfoListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupInfoListReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupInfoListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupInfoListReq* New() const final {
    return new IMGroupInfoListReq();
  }

  IMGroupInfoListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupInfoListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupInfoListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupInfoListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupInfoListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupInfoListReq";
  }
  protected:
  explicit IMGroupInfoListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupVersionListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  int group_version_list_size() const;
  private:
  int _internal_group_version_list_size() const;
  public:
  void clear_group_version_list();
  ::IM::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();
  private:
  const ::IM::BaseDefine::GroupVersionInfo& _internal_group_version_list(int index) const;
  ::IM::BaseDefine::GroupVersionInfo* _internal_add_group_version_list();
  public:
  const ::IM::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  ::IM::BaseDefine::GroupVersionInfo* add_group_version_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
      group_version_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo > group_version_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupInfoListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupInfoListRsp) */ {
 public:
  inline IMGroupInfoListRsp() : IMGroupInfoListRsp(nullptr) {}
  ~IMGroupInfoListRsp() override;
  explicit constexpr IMGroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupInfoListRsp(const IMGroupInfoListRsp& from);
  IMGroupInfoListRsp(IMGroupInfoListRsp&& from) noexcept
    : IMGroupInfoListRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupInfoListRsp& operator=(const IMGroupInfoListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupInfoListRsp& operator=(IMGroupInfoListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupInfoListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupInfoListRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupInfoListRsp*>(
               &_IMGroupInfoListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMGroupInfoListRsp& a, IMGroupInfoListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupInfoListRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupInfoListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupInfoListRsp* New() const final {
    return new IMGroupInfoListRsp();
  }

  IMGroupInfoListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupInfoListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupInfoListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupInfoListRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupInfoListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupInfoListRsp";
  }
  protected:
  explicit IMGroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupInfoListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  int group_info_list_size() const;
  private:
  int _internal_group_info_list_size() const;
  public:
  void clear_group_info_list();
  ::IM::BaseDefine::GroupInfo* mutable_group_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
      mutable_group_info_list();
  private:
  const ::IM::BaseDefine::GroupInfo& _internal_group_info_list(int index) const;
  ::IM::BaseDefine::GroupInfo* _internal_add_group_info_list();
  public:
  const ::IM::BaseDefine::GroupInfo& group_info_list(int index) const;
  ::IM::BaseDefine::GroupInfo* add_group_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
      group_info_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupInfo > group_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupCreateReq) */ {
 public:
  inline IMGroupCreateReq() : IMGroupCreateReq(nullptr) {}
  ~IMGroupCreateReq() override;
  explicit constexpr IMGroupCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupCreateReq(const IMGroupCreateReq& from);
  IMGroupCreateReq(IMGroupCreateReq&& from) noexcept
    : IMGroupCreateReq() {
    *this = ::std::move(from);
  }

  inline IMGroupCreateReq& operator=(const IMGroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupCreateReq& operator=(IMGroupCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupCreateReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupCreateReq*>(
               &_IMGroupCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMGroupCreateReq& a, IMGroupCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupCreateReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupCreateReq* New() const final {
    return new IMGroupCreateReq();
  }

  IMGroupCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupCreateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupCreateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupCreateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupCreateReq";
  }
  protected:
  explicit IMGroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 5,
    kGroupNameFieldNumber = 3,
    kGroupAvatarFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupTypeFieldNumber = 2,
  };
  // repeated uint32 member_id_list = 5;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_member_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id_list(int index) const;
  void set_member_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_member_id_list();

  // string group_name = 3;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string group_avatar = 4;
  void clear_group_avatar();
  const std::string& group_avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_avatar();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_avatar();
  void set_allocated_group_avatar(std::string* group_avatar);
  private:
  const std::string& _internal_group_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_avatar(const std::string& value);
  std::string* _internal_mutable_group_avatar();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.GroupType group_type = 2;
  void clear_group_type();
  ::IM::BaseDefine::GroupType group_type() const;
  void set_group_type(::IM::BaseDefine::GroupType value);
  private:
  ::IM::BaseDefine::GroupType _internal_group_type() const;
  void _internal_set_group_type(::IM::BaseDefine::GroupType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > member_id_list_;
  mutable std::atomic<int> _member_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int group_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupCreateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupCreateRsp) */ {
 public:
  inline IMGroupCreateRsp() : IMGroupCreateRsp(nullptr) {}
  ~IMGroupCreateRsp() override;
  explicit constexpr IMGroupCreateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupCreateRsp(const IMGroupCreateRsp& from);
  IMGroupCreateRsp(IMGroupCreateRsp&& from) noexcept
    : IMGroupCreateRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupCreateRsp& operator=(const IMGroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupCreateRsp& operator=(IMGroupCreateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupCreateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupCreateRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupCreateRsp*>(
               &_IMGroupCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMGroupCreateRsp& a, IMGroupCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupCreateRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupCreateRsp* New() const final {
    return new IMGroupCreateRsp();
  }

  IMGroupCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupCreateRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupCreateRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupCreateRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupCreateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupCreateRsp";
  }
  protected:
  explicit IMGroupCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdListFieldNumber = 5,
    kGroupNameFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 user_id_list = 5;
  int user_id_list_size() const;
  private:
  int _internal_user_id_list_size() const;
  public:
  void clear_user_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_user_id_list() const;
  void _internal_add_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_user_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_list(int index) const;
  void set_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_user_id_list();

  // string group_name = 4;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 3;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > user_id_list_;
  mutable std::atomic<int> _user_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupChangeMemberReq) */ {
 public:
  inline IMGroupChangeMemberReq() : IMGroupChangeMemberReq(nullptr) {}
  ~IMGroupChangeMemberReq() override;
  explicit constexpr IMGroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from);
  IMGroupChangeMemberReq(IMGroupChangeMemberReq&& from) noexcept
    : IMGroupChangeMemberReq() {
    *this = ::std::move(from);
  }

  inline IMGroupChangeMemberReq& operator=(const IMGroupChangeMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupChangeMemberReq& operator=(IMGroupChangeMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupChangeMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupChangeMemberReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupChangeMemberReq*>(
               &_IMGroupChangeMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMGroupChangeMemberReq& a, IMGroupChangeMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupChangeMemberReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupChangeMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupChangeMemberReq* New() const final {
    return new IMGroupChangeMemberReq();
  }

  IMGroupChangeMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupChangeMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupChangeMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupChangeMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupChangeMemberReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupChangeMemberReq";
  }
  protected:
  explicit IMGroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 member_id_list = 4;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_member_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 member_id_list(int index) const;
  void set_member_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_member_id_list();

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  void clear_change_type();
  ::IM::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::IM::BaseDefine::GroupModifyType value);
  private:
  ::IM::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::IM::BaseDefine::GroupModifyType value);
  public:

  // uint32 group_id = 3;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > member_id_list_;
  mutable std::atomic<int> _member_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int change_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupChangeMemberRsp) */ {
 public:
  inline IMGroupChangeMemberRsp() : IMGroupChangeMemberRsp(nullptr) {}
  ~IMGroupChangeMemberRsp() override;
  explicit constexpr IMGroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from);
  IMGroupChangeMemberRsp(IMGroupChangeMemberRsp&& from) noexcept
    : IMGroupChangeMemberRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupChangeMemberRsp& operator=(const IMGroupChangeMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupChangeMemberRsp& operator=(IMGroupChangeMemberRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupChangeMemberRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupChangeMemberRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupChangeMemberRsp*>(
               &_IMGroupChangeMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMGroupChangeMemberRsp& a, IMGroupChangeMemberRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupChangeMemberRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupChangeMemberRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupChangeMemberRsp* New() const final {
    return new IMGroupChangeMemberRsp();
  }

  IMGroupChangeMemberRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupChangeMemberRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupChangeMemberRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupChangeMemberRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupChangeMemberRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupChangeMemberRsp";
  }
  protected:
  explicit IMGroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurUserIdListFieldNumber = 5,
    kChgUserIdListFieldNumber = 6,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kResultCodeFieldNumber = 3,
    kGroupIdFieldNumber = 4,
  };
  // repeated uint32 cur_user_id_list = 5;
  int cur_user_id_list_size() const;
  private:
  int _internal_cur_user_id_list_size() const;
  public:
  void clear_cur_user_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cur_user_id_list() const;
  void _internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cur_user_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_user_id_list(int index) const;
  void set_cur_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cur_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 6;
  int chg_user_id_list_size() const;
  private:
  int _internal_chg_user_id_list_size() const;
  public:
  void clear_chg_user_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chg_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_chg_user_id_list() const;
  void _internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_chg_user_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 chg_user_id_list(int index) const;
  void set_chg_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      chg_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_chg_user_id_list();

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  void clear_change_type();
  ::IM::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::IM::BaseDefine::GroupModifyType value);
  private:
  ::IM::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::IM::BaseDefine::GroupModifyType value);
  public:

  // uint32 result_code = 3;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 4;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cur_user_id_list_;
  mutable std::atomic<int> _cur_user_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > chg_user_id_list_;
  mutable std::atomic<int> _chg_user_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int change_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupShieldReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupShieldReq) */ {
 public:
  inline IMGroupShieldReq() : IMGroupShieldReq(nullptr) {}
  ~IMGroupShieldReq() override;
  explicit constexpr IMGroupShieldReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupShieldReq(const IMGroupShieldReq& from);
  IMGroupShieldReq(IMGroupShieldReq&& from) noexcept
    : IMGroupShieldReq() {
    *this = ::std::move(from);
  }

  inline IMGroupShieldReq& operator=(const IMGroupShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupShieldReq& operator=(IMGroupShieldReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupShieldReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupShieldReq*>(
               &_IMGroupShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMGroupShieldReq& a, IMGroupShieldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupShieldReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupShieldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupShieldReq* New() const final {
    return new IMGroupShieldReq();
  }

  IMGroupShieldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupShieldReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupShieldReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupShieldReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupShieldReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupShieldReq";
  }
  protected:
  explicit IMGroupShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kShieldStatusFieldNumber = 3,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shield_status = 3;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupShieldReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupShieldRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupShieldRsp) */ {
 public:
  inline IMGroupShieldRsp() : IMGroupShieldRsp(nullptr) {}
  ~IMGroupShieldRsp() override;
  explicit constexpr IMGroupShieldRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupShieldRsp(const IMGroupShieldRsp& from);
  IMGroupShieldRsp(IMGroupShieldRsp&& from) noexcept
    : IMGroupShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupShieldRsp& operator=(const IMGroupShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupShieldRsp& operator=(IMGroupShieldRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupShieldRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupShieldRsp*>(
               &_IMGroupShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMGroupShieldRsp& a, IMGroupShieldRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupShieldRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupShieldRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupShieldRsp* New() const final {
    return new IMGroupShieldRsp();
  }

  IMGroupShieldRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupShieldRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupShieldRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupShieldRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupShieldRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupShieldRsp";
  }
  protected:
  explicit IMGroupShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kResultCodeFieldNumber = 3,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 3;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupShieldRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Group.IMGroupChangeMemberNotify) */ {
 public:
  inline IMGroupChangeMemberNotify() : IMGroupChangeMemberNotify(nullptr) {}
  ~IMGroupChangeMemberNotify() override;
  explicit constexpr IMGroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from);
  IMGroupChangeMemberNotify(IMGroupChangeMemberNotify&& from) noexcept
    : IMGroupChangeMemberNotify() {
    *this = ::std::move(from);
  }

  inline IMGroupChangeMemberNotify& operator=(const IMGroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupChangeMemberNotify& operator=(IMGroupChangeMemberNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupChangeMemberNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupChangeMemberNotify* internal_default_instance() {
    return reinterpret_cast<const IMGroupChangeMemberNotify*>(
               &_IMGroupChangeMemberNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMGroupChangeMemberNotify& a, IMGroupChangeMemberNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupChangeMemberNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupChangeMemberNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupChangeMemberNotify* New() const final {
    return new IMGroupChangeMemberNotify();
  }

  IMGroupChangeMemberNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupChangeMemberNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupChangeMemberNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupChangeMemberNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupChangeMemberNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Group.IMGroupChangeMemberNotify";
  }
  protected:
  explicit IMGroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurUserIdListFieldNumber = 4,
    kChgUserIdListFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 cur_user_id_list = 4;
  int cur_user_id_list_size() const;
  private:
  int _internal_cur_user_id_list_size() const;
  public:
  void clear_cur_user_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cur_user_id_list() const;
  void _internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cur_user_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_user_id_list(int index) const;
  void set_cur_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cur_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 5;
  int chg_user_id_list_size() const;
  private:
  int _internal_chg_user_id_list_size() const;
  public:
  void clear_chg_user_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chg_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_chg_user_id_list() const;
  void _internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_chg_user_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 chg_user_id_list(int index) const;
  void set_chg_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      chg_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_chg_user_id_list();

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  void clear_change_type();
  ::IM::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::IM::BaseDefine::GroupModifyType value);
  private:
  ::IM::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::IM::BaseDefine::GroupModifyType value);
  public:

  // uint32 group_id = 3;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cur_user_id_list_;
  mutable std::atomic<int> _cur_user_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > chg_user_id_list_;
  mutable std::atomic<int> _chg_user_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int change_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eGroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMNormalGroupListReq

// uint32 user_id = 1;
inline void IMNormalGroupListReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMNormalGroupListReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMNormalGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.user_id)
  return _internal_user_id();
}
inline void IMNormalGroupListReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMNormalGroupListReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.user_id)
}

// bytes attach_data = 20;
inline void IMNormalGroupListReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMNormalGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMNormalGroupListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.attach_data)
}
inline std::string* IMNormalGroupListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListReq.attach_data)
  return _s;
}
inline const std::string& IMNormalGroupListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMNormalGroupListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMNormalGroupListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMNormalGroupListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMNormalGroupListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMNormalGroupListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListReq.attach_data)
}

// -------------------------------------------------------------------

// IMNormalGroupListRsp

// uint32 user_id = 1;
inline void IMNormalGroupListRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMNormalGroupListRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMNormalGroupListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.user_id)
  return _internal_user_id();
}
inline void IMNormalGroupListRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMNormalGroupListRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int IMNormalGroupListRsp::_internal_group_version_list_size() const {
  return group_version_list_.size();
}
inline int IMNormalGroupListRsp::group_version_list_size() const {
  return _internal_group_version_list_size();
}
inline ::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMNormalGroupListRsp::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return &group_version_list_;
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMNormalGroupListRsp::_internal_group_version_list(int index) const {
  return group_version_list_.Get(index);
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMNormalGroupListRsp::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.group_version_list)
  return _internal_group_version_list(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::_internal_add_group_version_list() {
  return group_version_list_.Add();
}
inline ::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::add_group_version_list() {
  ::IM::BaseDefine::GroupVersionInfo* _add = _internal_add_group_version_list();
  // @@protoc_insertion_point(field_add:IM.Group.IMNormalGroupListRsp.group_version_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMNormalGroupListRsp::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_;
}

// bytes attach_data = 20;
inline void IMNormalGroupListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMNormalGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMNormalGroupListRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.attach_data)
}
inline std::string* IMNormalGroupListRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.attach_data)
  return _s;
}
inline const std::string& IMNormalGroupListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMNormalGroupListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMNormalGroupListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMNormalGroupListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMNormalGroupListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMNormalGroupListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoListReq

// uint32 user_id = 1;
inline void IMGroupInfoListReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupInfoListReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupInfoListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.user_id)
  return _internal_user_id();
}
inline void IMGroupInfoListReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupInfoListReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int IMGroupInfoListReq::_internal_group_version_list_size() const {
  return group_version_list_.size();
}
inline int IMGroupInfoListReq::group_version_list_size() const {
  return _internal_group_version_list_size();
}
inline ::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMGroupInfoListReq::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return &group_version_list_;
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMGroupInfoListReq::_internal_group_version_list(int index) const {
  return group_version_list_.Get(index);
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMGroupInfoListReq::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.group_version_list)
  return _internal_group_version_list(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::_internal_add_group_version_list() {
  return group_version_list_.Add();
}
inline ::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::add_group_version_list() {
  ::IM::BaseDefine::GroupVersionInfo* _add = _internal_add_group_version_list();
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListReq.group_version_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMGroupInfoListReq::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_;
}

// bytes attach_data = 20;
inline void IMGroupInfoListReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupInfoListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupInfoListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.attach_data)
}
inline std::string* IMGroupInfoListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.attach_data)
  return _s;
}
inline const std::string& IMGroupInfoListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupInfoListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupInfoListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupInfoListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupInfoListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupInfoListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoListRsp

// uint32 user_id = 1;
inline void IMGroupInfoListRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupInfoListRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupInfoListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.user_id)
  return _internal_user_id();
}
inline void IMGroupInfoListRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupInfoListRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
inline int IMGroupInfoListRsp::_internal_group_info_list_size() const {
  return group_info_list_.size();
}
inline int IMGroupInfoListRsp::group_info_list_size() const {
  return _internal_group_info_list_size();
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
IMGroupInfoListRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return &group_info_list_;
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoListRsp::_internal_group_info_list(int index) const {
  return group_info_list_.Get(index);
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoListRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.group_info_list)
  return _internal_group_info_list(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::_internal_add_group_info_list() {
  return group_info_list_.Add();
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::add_group_info_list() {
  ::IM::BaseDefine::GroupInfo* _add = _internal_add_group_info_list();
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListRsp.group_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
IMGroupInfoListRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_;
}

// bytes attach_data = 20;
inline void IMGroupInfoListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupInfoListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupInfoListRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.attach_data)
}
inline std::string* IMGroupInfoListRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.attach_data)
  return _s;
}
inline const std::string& IMGroupInfoListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupInfoListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupInfoListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupInfoListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupInfoListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupInfoListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateReq

// uint32 user_id = 1;
inline void IMGroupCreateReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.user_id)
  return _internal_user_id();
}
inline void IMGroupCreateReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupCreateReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.user_id)
}

// .IM.BaseDefine.GroupType group_type = 2;
inline void IMGroupCreateReq::clear_group_type() {
  group_type_ = 0;
}
inline ::IM::BaseDefine::GroupType IMGroupCreateReq::_internal_group_type() const {
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline ::IM::BaseDefine::GroupType IMGroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_type)
  return _internal_group_type();
}
inline void IMGroupCreateReq::_internal_set_group_type(::IM::BaseDefine::GroupType value) {
  
  group_type_ = value;
}
inline void IMGroupCreateReq::set_group_type(::IM::BaseDefine::GroupType value) {
  _internal_set_group_type(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_type)
}

// string group_name = 3;
inline void IMGroupCreateReq::clear_group_name() {
  group_name_.ClearToEmpty();
}
inline const std::string& IMGroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupCreateReq::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_name)
}
inline std::string* IMGroupCreateReq::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_name)
  return _s;
}
inline const std::string& IMGroupCreateReq::_internal_group_name() const {
  return group_name_.Get();
}
inline void IMGroupCreateReq::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::_internal_mutable_group_name() {
  
  return group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupCreateReq::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_name)
}

// string group_avatar = 4;
inline void IMGroupCreateReq::clear_group_avatar() {
  group_avatar_.ClearToEmpty();
}
inline const std::string& IMGroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_avatar)
  return _internal_group_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupCreateReq::set_group_avatar(ArgT0&& arg0, ArgT... args) {
 
 group_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_avatar)
}
inline std::string* IMGroupCreateReq::mutable_group_avatar() {
  std::string* _s = _internal_mutable_group_avatar();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_avatar)
  return _s;
}
inline const std::string& IMGroupCreateReq::_internal_group_avatar() const {
  return group_avatar_.Get();
}
inline void IMGroupCreateReq::_internal_set_group_avatar(const std::string& value) {
  
  group_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::_internal_mutable_group_avatar() {
  
  return group_avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::release_group_avatar() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.group_avatar)
  return group_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupCreateReq::set_allocated_group_avatar(std::string* group_avatar) {
  if (group_avatar != nullptr) {
    
  } else {
    
  }
  group_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_avatar)
}

// repeated uint32 member_id_list = 5;
inline int IMGroupCreateReq::_internal_member_id_list_size() const {
  return member_id_list_.size();
}
inline int IMGroupCreateReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void IMGroupCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateReq::_internal_member_id_list(int index) const {
  return member_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void IMGroupCreateReq::set_member_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.member_id_list)
}
inline void IMGroupCreateReq::_internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_id_list_.Add(value);
}
inline void IMGroupCreateReq::add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupCreateReq::_internal_member_id_list() const {
  return member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupCreateReq::_internal_mutable_member_id_list() {
  return &member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// bytes attach_data = 20;
inline void IMGroupCreateReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupCreateReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.attach_data)
}
inline std::string* IMGroupCreateReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.attach_data)
  return _s;
}
inline const std::string& IMGroupCreateReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupCreateReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupCreateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupCreateReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateRsp

// uint32 user_id = 1;
inline void IMGroupCreateRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id)
  return _internal_user_id();
}
inline void IMGroupCreateRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupCreateRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id)
}

// uint32 result_code = 2;
inline void IMGroupCreateRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.result_code)
  return _internal_result_code();
}
inline void IMGroupCreateRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMGroupCreateRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.result_code)
}

// uint32 group_id = 3;
inline void IMGroupCreateRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_id)
  return _internal_group_id();
}
inline void IMGroupCreateRsp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupCreateRsp::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_id)
}

// string group_name = 4;
inline void IMGroupCreateRsp::clear_group_name() {
  group_name_.ClearToEmpty();
}
inline const std::string& IMGroupCreateRsp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupCreateRsp::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_name)
}
inline std::string* IMGroupCreateRsp::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.group_name)
  return _s;
}
inline const std::string& IMGroupCreateRsp::_internal_group_name() const {
  return group_name_.Get();
}
inline void IMGroupCreateRsp::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupCreateRsp::_internal_mutable_group_name() {
  
  return group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupCreateRsp::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateRsp.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupCreateRsp::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.group_name)
}

// repeated uint32 user_id_list = 5;
inline int IMGroupCreateRsp::_internal_user_id_list_size() const {
  return user_id_list_.size();
}
inline int IMGroupCreateRsp::user_id_list_size() const {
  return _internal_user_id_list_size();
}
inline void IMGroupCreateRsp::clear_user_id_list() {
  user_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::_internal_user_id_list(int index) const {
  return user_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupCreateRsp::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id_list)
  return _internal_user_id_list(index);
}
inline void IMGroupCreateRsp::set_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id_list)
}
inline void IMGroupCreateRsp::_internal_add_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_list_.Add(value);
}
inline void IMGroupCreateRsp::add_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_user_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateRsp.user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupCreateRsp::_internal_user_id_list() const {
  return user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupCreateRsp::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return _internal_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupCreateRsp::_internal_mutable_user_id_list() {
  return &user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupCreateRsp::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return _internal_mutable_user_id_list();
}

// bytes attach_data = 20;
inline void IMGroupCreateRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupCreateRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.attach_data)
}
inline std::string* IMGroupCreateRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.attach_data)
  return _s;
}
inline const std::string& IMGroupCreateRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupCreateRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupCreateRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupCreateRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupCreateRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberReq

// uint32 user_id = 1;
inline void IMGroupChangeMemberReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.user_id)
  return _internal_user_id();
}
inline void IMGroupChangeMemberReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupChangeMemberReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.user_id)
}

// .IM.BaseDefine.GroupModifyType change_type = 2;
inline void IMGroupChangeMemberReq::clear_change_type() {
  change_type_ = 0;
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberReq::_internal_change_type() const {
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberReq::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.change_type)
  return _internal_change_type();
}
inline void IMGroupChangeMemberReq::_internal_set_change_type(::IM::BaseDefine::GroupModifyType value) {
  
  change_type_ = value;
}
inline void IMGroupChangeMemberReq::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.change_type)
}

// uint32 group_id = 3;
inline void IMGroupChangeMemberReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.group_id)
  return _internal_group_id();
}
inline void IMGroupChangeMemberReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupChangeMemberReq::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.group_id)
}

// repeated uint32 member_id_list = 4;
inline int IMGroupChangeMemberReq::_internal_member_id_list_size() const {
  return member_id_list_.size();
}
inline int IMGroupChangeMemberReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void IMGroupChangeMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::_internal_member_id_list(int index) const {
  return member_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void IMGroupChangeMemberReq::set_member_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
inline void IMGroupChangeMemberReq::_internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_id_list_.Add(value);
}
inline void IMGroupChangeMemberReq::add_member_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberReq::_internal_member_id_list() const {
  return member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberReq::_internal_mutable_member_id_list() {
  return &member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// bytes attach_data = 20;
inline void IMGroupChangeMemberReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupChangeMemberReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline std::string* IMGroupChangeMemberReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.attach_data)
  return _s;
}
inline const std::string& IMGroupChangeMemberReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupChangeMemberReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupChangeMemberReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupChangeMemberReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupChangeMemberReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupChangeMemberReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberRsp

// uint32 user_id = 1;
inline void IMGroupChangeMemberRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.user_id)
  return _internal_user_id();
}
inline void IMGroupChangeMemberRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupChangeMemberRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.user_id)
}

// .IM.BaseDefine.GroupModifyType change_type = 2;
inline void IMGroupChangeMemberRsp::clear_change_type() {
  change_type_ = 0;
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberRsp::_internal_change_type() const {
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberRsp::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.change_type)
  return _internal_change_type();
}
inline void IMGroupChangeMemberRsp::_internal_set_change_type(::IM::BaseDefine::GroupModifyType value) {
  
  change_type_ = value;
}
inline void IMGroupChangeMemberRsp::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.change_type)
}

// uint32 result_code = 3;
inline void IMGroupChangeMemberRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.result_code)
  return _internal_result_code();
}
inline void IMGroupChangeMemberRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMGroupChangeMemberRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.result_code)
}

// uint32 group_id = 4;
inline void IMGroupChangeMemberRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.group_id)
  return _internal_group_id();
}
inline void IMGroupChangeMemberRsp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupChangeMemberRsp::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.group_id)
}

// repeated uint32 cur_user_id_list = 5;
inline int IMGroupChangeMemberRsp::_internal_cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
inline int IMGroupChangeMemberRsp::cur_user_id_list_size() const {
  return _internal_cur_user_id_list_size();
}
inline void IMGroupChangeMemberRsp::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::_internal_cur_user_id_list(int index) const {
  return cur_user_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return _internal_cur_user_id_list(index);
}
inline void IMGroupChangeMemberRsp::set_cur_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
inline void IMGroupChangeMemberRsp::_internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cur_user_id_list_.Add(value);
}
inline void IMGroupChangeMemberRsp::add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cur_user_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberRsp::_internal_cur_user_id_list() const {
  return cur_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberRsp::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return _internal_cur_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberRsp::_internal_mutable_cur_user_id_list() {
  return &cur_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberRsp::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return _internal_mutable_cur_user_id_list();
}

// repeated uint32 chg_user_id_list = 6;
inline int IMGroupChangeMemberRsp::_internal_chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline int IMGroupChangeMemberRsp::chg_user_id_list_size() const {
  return _internal_chg_user_id_list_size();
}
inline void IMGroupChangeMemberRsp::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::_internal_chg_user_id_list(int index) const {
  return chg_user_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberRsp::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return _internal_chg_user_id_list(index);
}
inline void IMGroupChangeMemberRsp::set_chg_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
inline void IMGroupChangeMemberRsp::_internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chg_user_id_list_.Add(value);
}
inline void IMGroupChangeMemberRsp::add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_chg_user_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberRsp::_internal_chg_user_id_list() const {
  return chg_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberRsp::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return _internal_chg_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberRsp::_internal_mutable_chg_user_id_list() {
  return &chg_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberRsp::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return _internal_mutable_chg_user_id_list();
}

// bytes attach_data = 20;
inline void IMGroupChangeMemberRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupChangeMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupChangeMemberRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline std::string* IMGroupChangeMemberRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return _s;
}
inline const std::string& IMGroupChangeMemberRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupChangeMemberRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupChangeMemberRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupChangeMemberRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupChangeMemberRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupShieldReq

// uint32 user_id = 1;
inline void IMGroupShieldReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.user_id)
  return _internal_user_id();
}
inline void IMGroupShieldReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupShieldReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.user_id)
}

// uint32 group_id = 2;
inline void IMGroupShieldReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.group_id)
  return _internal_group_id();
}
inline void IMGroupShieldReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupShieldReq::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.group_id)
}

// uint32 shield_status = 3;
inline void IMGroupShieldReq::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.shield_status)
  return _internal_shield_status();
}
inline void IMGroupShieldReq::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void IMGroupShieldReq::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.shield_status)
}

// bytes attach_data = 20;
inline void IMGroupShieldReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupShieldReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.attach_data)
}
inline std::string* IMGroupShieldReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldReq.attach_data)
  return _s;
}
inline const std::string& IMGroupShieldReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupShieldReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupShieldReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupShieldReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupShieldReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupShieldRsp

// uint32 user_id = 1;
inline void IMGroupShieldRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.user_id)
  return _internal_user_id();
}
inline void IMGroupShieldRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupShieldRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.user_id)
}

// uint32 group_id = 2;
inline void IMGroupShieldRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.group_id)
  return _internal_group_id();
}
inline void IMGroupShieldRsp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupShieldRsp::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.group_id)
}

// uint32 result_code = 3;
inline void IMGroupShieldRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.result_code)
  return _internal_result_code();
}
inline void IMGroupShieldRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMGroupShieldRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.result_code)
}

// bytes attach_data = 20;
inline void IMGroupShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupShieldRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.attach_data)
}
inline std::string* IMGroupShieldRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldRsp.attach_data)
  return _s;
}
inline const std::string& IMGroupShieldRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupShieldRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupShieldRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupShieldRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupShieldRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberNotify

// uint32 user_id = 1;
inline void IMGroupChangeMemberNotify::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.user_id)
  return _internal_user_id();
}
inline void IMGroupChangeMemberNotify::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGroupChangeMemberNotify::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.user_id)
}

// .IM.BaseDefine.GroupModifyType change_type = 2;
inline void IMGroupChangeMemberNotify::clear_change_type() {
  change_type_ = 0;
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberNotify::_internal_change_type() const {
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberNotify::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.change_type)
  return _internal_change_type();
}
inline void IMGroupChangeMemberNotify::_internal_set_change_type(::IM::BaseDefine::GroupModifyType value) {
  
  change_type_ = value;
}
inline void IMGroupChangeMemberNotify::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.change_type)
}

// uint32 group_id = 3;
inline void IMGroupChangeMemberNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.group_id)
  return _internal_group_id();
}
inline void IMGroupChangeMemberNotify::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupChangeMemberNotify::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.group_id)
}

// repeated uint32 cur_user_id_list = 4;
inline int IMGroupChangeMemberNotify::_internal_cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
inline int IMGroupChangeMemberNotify::cur_user_id_list_size() const {
  return _internal_cur_user_id_list_size();
}
inline void IMGroupChangeMemberNotify::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::_internal_cur_user_id_list(int index) const {
  return cur_user_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return _internal_cur_user_id_list(index);
}
inline void IMGroupChangeMemberNotify::set_cur_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
inline void IMGroupChangeMemberNotify::_internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cur_user_id_list_.Add(value);
}
inline void IMGroupChangeMemberNotify::add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cur_user_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberNotify::_internal_cur_user_id_list() const {
  return cur_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberNotify::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return _internal_cur_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberNotify::_internal_mutable_cur_user_id_list() {
  return &cur_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberNotify::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return _internal_mutable_cur_user_id_list();
}

// repeated uint32 chg_user_id_list = 5;
inline int IMGroupChangeMemberNotify::_internal_chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline int IMGroupChangeMemberNotify::chg_user_id_list_size() const {
  return _internal_chg_user_id_list_size();
}
inline void IMGroupChangeMemberNotify::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::_internal_chg_user_id_list(int index) const {
  return chg_user_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupChangeMemberNotify::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return _internal_chg_user_id_list(index);
}
inline void IMGroupChangeMemberNotify::set_chg_user_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
inline void IMGroupChangeMemberNotify::_internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chg_user_id_list_.Add(value);
}
inline void IMGroupChangeMemberNotify::add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_chg_user_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberNotify::_internal_chg_user_id_list() const {
  return chg_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupChangeMemberNotify::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return _internal_chg_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberNotify::_internal_mutable_chg_user_id_list() {
  return &chg_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupChangeMemberNotify::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return _internal_mutable_chg_user_id_list();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eGroup_2eproto
