// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eServer_2eproto;
namespace IM {
namespace Server {
class IMFileServerIPReq;
struct IMFileServerIPReqDefaultTypeInternal;
extern IMFileServerIPReqDefaultTypeInternal _IMFileServerIPReq_default_instance_;
class IMFileServerIPRsp;
struct IMFileServerIPRspDefaultTypeInternal;
extern IMFileServerIPRspDefaultTypeInternal _IMFileServerIPRsp_default_instance_;
class IMFileTransferReq;
struct IMFileTransferReqDefaultTypeInternal;
extern IMFileTransferReqDefaultTypeInternal _IMFileTransferReq_default_instance_;
class IMFileTransferRsp;
struct IMFileTransferRspDefaultTypeInternal;
extern IMFileTransferRspDefaultTypeInternal _IMFileTransferRsp_default_instance_;
class IMGetDeviceTokenReq;
struct IMGetDeviceTokenReqDefaultTypeInternal;
extern IMGetDeviceTokenReqDefaultTypeInternal _IMGetDeviceTokenReq_default_instance_;
class IMGetDeviceTokenRsp;
struct IMGetDeviceTokenRspDefaultTypeInternal;
extern IMGetDeviceTokenRspDefaultTypeInternal _IMGetDeviceTokenRsp_default_instance_;
class IMGroupGetShieldReq;
struct IMGroupGetShieldReqDefaultTypeInternal;
extern IMGroupGetShieldReqDefaultTypeInternal _IMGroupGetShieldReq_default_instance_;
class IMGroupGetShieldRsp;
struct IMGroupGetShieldRspDefaultTypeInternal;
extern IMGroupGetShieldRspDefaultTypeInternal _IMGroupGetShieldRsp_default_instance_;
class IMMsgServInfo;
struct IMMsgServInfoDefaultTypeInternal;
extern IMMsgServInfoDefaultTypeInternal _IMMsgServInfo_default_instance_;
class IMOnlineUserInfo;
struct IMOnlineUserInfoDefaultTypeInternal;
extern IMOnlineUserInfoDefaultTypeInternal _IMOnlineUserInfo_default_instance_;
class IMPushToUserReq;
struct IMPushToUserReqDefaultTypeInternal;
extern IMPushToUserReqDefaultTypeInternal _IMPushToUserReq_default_instance_;
class IMPushToUserRsp;
struct IMPushToUserRspDefaultTypeInternal;
extern IMPushToUserRspDefaultTypeInternal _IMPushToUserRsp_default_instance_;
class IMRoleSet;
struct IMRoleSetDefaultTypeInternal;
extern IMRoleSetDefaultTypeInternal _IMRoleSet_default_instance_;
class IMServerKickUser;
struct IMServerKickUserDefaultTypeInternal;
extern IMServerKickUserDefaultTypeInternal _IMServerKickUser_default_instance_;
class IMServerPCLoginStatusNotify;
struct IMServerPCLoginStatusNotifyDefaultTypeInternal;
extern IMServerPCLoginStatusNotifyDefaultTypeInternal _IMServerPCLoginStatusNotify_default_instance_;
class IMStopReceivePacket;
struct IMStopReceivePacketDefaultTypeInternal;
extern IMStopReceivePacketDefaultTypeInternal _IMStopReceivePacket_default_instance_;
class IMUserCntUpdate;
struct IMUserCntUpdateDefaultTypeInternal;
extern IMUserCntUpdateDefaultTypeInternal _IMUserCntUpdate_default_instance_;
class IMUserStatusUpdate;
struct IMUserStatusUpdateDefaultTypeInternal;
extern IMUserStatusUpdateDefaultTypeInternal _IMUserStatusUpdate_default_instance_;
class IMValidateReq;
struct IMValidateReqDefaultTypeInternal;
extern IMValidateReqDefaultTypeInternal _IMValidateReq_default_instance_;
class IMValidateRsp;
struct IMValidateRspDefaultTypeInternal;
extern IMValidateRspDefaultTypeInternal _IMValidateRsp_default_instance_;
}  // namespace Server
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Server::IMFileServerIPReq* Arena::CreateMaybeMessage<::IM::Server::IMFileServerIPReq>(Arena*);
template<> ::IM::Server::IMFileServerIPRsp* Arena::CreateMaybeMessage<::IM::Server::IMFileServerIPRsp>(Arena*);
template<> ::IM::Server::IMFileTransferReq* Arena::CreateMaybeMessage<::IM::Server::IMFileTransferReq>(Arena*);
template<> ::IM::Server::IMFileTransferRsp* Arena::CreateMaybeMessage<::IM::Server::IMFileTransferRsp>(Arena*);
template<> ::IM::Server::IMGetDeviceTokenReq* Arena::CreateMaybeMessage<::IM::Server::IMGetDeviceTokenReq>(Arena*);
template<> ::IM::Server::IMGetDeviceTokenRsp* Arena::CreateMaybeMessage<::IM::Server::IMGetDeviceTokenRsp>(Arena*);
template<> ::IM::Server::IMGroupGetShieldReq* Arena::CreateMaybeMessage<::IM::Server::IMGroupGetShieldReq>(Arena*);
template<> ::IM::Server::IMGroupGetShieldRsp* Arena::CreateMaybeMessage<::IM::Server::IMGroupGetShieldRsp>(Arena*);
template<> ::IM::Server::IMMsgServInfo* Arena::CreateMaybeMessage<::IM::Server::IMMsgServInfo>(Arena*);
template<> ::IM::Server::IMOnlineUserInfo* Arena::CreateMaybeMessage<::IM::Server::IMOnlineUserInfo>(Arena*);
template<> ::IM::Server::IMPushToUserReq* Arena::CreateMaybeMessage<::IM::Server::IMPushToUserReq>(Arena*);
template<> ::IM::Server::IMPushToUserRsp* Arena::CreateMaybeMessage<::IM::Server::IMPushToUserRsp>(Arena*);
template<> ::IM::Server::IMRoleSet* Arena::CreateMaybeMessage<::IM::Server::IMRoleSet>(Arena*);
template<> ::IM::Server::IMServerKickUser* Arena::CreateMaybeMessage<::IM::Server::IMServerKickUser>(Arena*);
template<> ::IM::Server::IMServerPCLoginStatusNotify* Arena::CreateMaybeMessage<::IM::Server::IMServerPCLoginStatusNotify>(Arena*);
template<> ::IM::Server::IMStopReceivePacket* Arena::CreateMaybeMessage<::IM::Server::IMStopReceivePacket>(Arena*);
template<> ::IM::Server::IMUserCntUpdate* Arena::CreateMaybeMessage<::IM::Server::IMUserCntUpdate>(Arena*);
template<> ::IM::Server::IMUserStatusUpdate* Arena::CreateMaybeMessage<::IM::Server::IMUserStatusUpdate>(Arena*);
template<> ::IM::Server::IMValidateReq* Arena::CreateMaybeMessage<::IM::Server::IMValidateReq>(Arena*);
template<> ::IM::Server::IMValidateRsp* Arena::CreateMaybeMessage<::IM::Server::IMValidateRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Server {

// ===================================================================

class IMStopReceivePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMStopReceivePacket) */ {
 public:
  inline IMStopReceivePacket() : IMStopReceivePacket(nullptr) {}
  ~IMStopReceivePacket() override;
  explicit constexpr IMStopReceivePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMStopReceivePacket(const IMStopReceivePacket& from);
  IMStopReceivePacket(IMStopReceivePacket&& from) noexcept
    : IMStopReceivePacket() {
    *this = ::std::move(from);
  }

  inline IMStopReceivePacket& operator=(const IMStopReceivePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMStopReceivePacket& operator=(IMStopReceivePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMStopReceivePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMStopReceivePacket* internal_default_instance() {
    return reinterpret_cast<const IMStopReceivePacket*>(
               &_IMStopReceivePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMStopReceivePacket& a, IMStopReceivePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(IMStopReceivePacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMStopReceivePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMStopReceivePacket* New() const final {
    return new IMStopReceivePacket();
  }

  IMStopReceivePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMStopReceivePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMStopReceivePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMStopReceivePacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMStopReceivePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMStopReceivePacket";
  }
  protected:
  explicit IMStopReceivePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMStopReceivePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMValidateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMValidateReq) */ {
 public:
  inline IMValidateReq() : IMValidateReq(nullptr) {}
  ~IMValidateReq() override;
  explicit constexpr IMValidateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMValidateReq(const IMValidateReq& from);
  IMValidateReq(IMValidateReq&& from) noexcept
    : IMValidateReq() {
    *this = ::std::move(from);
  }

  inline IMValidateReq& operator=(const IMValidateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMValidateReq& operator=(IMValidateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMValidateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMValidateReq* internal_default_instance() {
    return reinterpret_cast<const IMValidateReq*>(
               &_IMValidateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMValidateReq& a, IMValidateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMValidateReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMValidateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMValidateReq* New() const final {
    return new IMValidateReq();
  }

  IMValidateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMValidateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMValidateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMValidateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMValidateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMValidateReq";
  }
  protected:
  explicit IMValidateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMValidateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMValidateRsp) */ {
 public:
  inline IMValidateRsp() : IMValidateRsp(nullptr) {}
  ~IMValidateRsp() override;
  explicit constexpr IMValidateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMValidateRsp(const IMValidateRsp& from);
  IMValidateRsp(IMValidateRsp&& from) noexcept
    : IMValidateRsp() {
    *this = ::std::move(from);
  }

  inline IMValidateRsp& operator=(const IMValidateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMValidateRsp& operator=(IMValidateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMValidateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMValidateRsp* internal_default_instance() {
    return reinterpret_cast<const IMValidateRsp*>(
               &_IMValidateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMValidateRsp& a, IMValidateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMValidateRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMValidateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMValidateRsp* New() const final {
    return new IMValidateRsp();
  }

  IMValidateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMValidateRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMValidateRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMValidateRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMValidateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMValidateRsp";
  }
  protected:
  explicit IMValidateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kResultStringFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kUserInfoFieldNumber = 4,
    kResultCodeFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string result_string = 3;
  void clear_result_string();
  const std::string& result_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.UserInfo user_info = 4;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::IM::BaseDefine::UserInfo& user_info() const;
  PROTOBUF_MUST_USE_RESULT ::IM::BaseDefine::UserInfo* release_user_info();
  ::IM::BaseDefine::UserInfo* mutable_user_info();
  void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::IM::BaseDefine::UserInfo* user_info);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_user_info();

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGetDeviceTokenReq) */ {
 public:
  inline IMGetDeviceTokenReq() : IMGetDeviceTokenReq(nullptr) {}
  ~IMGetDeviceTokenReq() override;
  explicit constexpr IMGetDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from);
  IMGetDeviceTokenReq(IMGetDeviceTokenReq&& from) noexcept
    : IMGetDeviceTokenReq() {
    *this = ::std::move(from);
  }

  inline IMGetDeviceTokenReq& operator=(const IMGetDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetDeviceTokenReq& operator=(IMGetDeviceTokenReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetDeviceTokenReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetDeviceTokenReq* internal_default_instance() {
    return reinterpret_cast<const IMGetDeviceTokenReq*>(
               &_IMGetDeviceTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMGetDeviceTokenReq& a, IMGetDeviceTokenReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetDeviceTokenReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetDeviceTokenReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetDeviceTokenReq* New() const final {
    return new IMGetDeviceTokenReq();
  }

  IMGetDeviceTokenReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetDeviceTokenReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetDeviceTokenReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetDeviceTokenReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetDeviceTokenReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMGetDeviceTokenReq";
  }
  protected:
  explicit IMGetDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated uint32 user_id = 1;
  int user_id_size() const;
  private:
  int _internal_user_id_size() const;
  public:
  void clear_user_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_user_id() const;
  void _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_user_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id(int index) const;
  void set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_user_id();

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > user_id_;
  mutable std::atomic<int> _user_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGetDeviceTokenRsp) */ {
 public:
  inline IMGetDeviceTokenRsp() : IMGetDeviceTokenRsp(nullptr) {}
  ~IMGetDeviceTokenRsp() override;
  explicit constexpr IMGetDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from);
  IMGetDeviceTokenRsp(IMGetDeviceTokenRsp&& from) noexcept
    : IMGetDeviceTokenRsp() {
    *this = ::std::move(from);
  }

  inline IMGetDeviceTokenRsp& operator=(const IMGetDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetDeviceTokenRsp& operator=(IMGetDeviceTokenRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetDeviceTokenRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetDeviceTokenRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetDeviceTokenRsp*>(
               &_IMGetDeviceTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMGetDeviceTokenRsp& a, IMGetDeviceTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetDeviceTokenRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetDeviceTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetDeviceTokenRsp* New() const final {
    return new IMGetDeviceTokenRsp();
  }

  IMGetDeviceTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetDeviceTokenRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetDeviceTokenRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetDeviceTokenRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetDeviceTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMGetDeviceTokenRsp";
  }
  protected:
  explicit IMGetDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTokenInfoFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  int user_token_info_size() const;
  private:
  int _internal_user_token_info_size() const;
  public:
  void clear_user_token_info();
  ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();
  private:
  const ::IM::BaseDefine::UserTokenInfo& _internal_user_token_info(int index) const;
  ::IM::BaseDefine::UserTokenInfo* _internal_add_user_token_info();
  public:
  const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMRoleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMRoleSet) */ {
 public:
  inline IMRoleSet() : IMRoleSet(nullptr) {}
  ~IMRoleSet() override;
  explicit constexpr IMRoleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMRoleSet(const IMRoleSet& from);
  IMRoleSet(IMRoleSet&& from) noexcept
    : IMRoleSet() {
    *this = ::std::move(from);
  }

  inline IMRoleSet& operator=(const IMRoleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRoleSet& operator=(IMRoleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMRoleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMRoleSet* internal_default_instance() {
    return reinterpret_cast<const IMRoleSet*>(
               &_IMRoleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMRoleSet& a, IMRoleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRoleSet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRoleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRoleSet* New() const final {
    return new IMRoleSet();
  }

  IMRoleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRoleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMRoleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMRoleSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMRoleSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMRoleSet";
  }
  protected:
  explicit IMRoleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 1,
  };
  // uint32 master = 1;
  void clear_master();
  ::PROTOBUF_NAMESPACE_ID::uint32 master() const;
  void set_master(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_master() const;
  void _internal_set_master(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMRoleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 master_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMOnlineUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMOnlineUserInfo) */ {
 public:
  inline IMOnlineUserInfo() : IMOnlineUserInfo(nullptr) {}
  ~IMOnlineUserInfo() override;
  explicit constexpr IMOnlineUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMOnlineUserInfo(const IMOnlineUserInfo& from);
  IMOnlineUserInfo(IMOnlineUserInfo&& from) noexcept
    : IMOnlineUserInfo() {
    *this = ::std::move(from);
  }

  inline IMOnlineUserInfo& operator=(const IMOnlineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMOnlineUserInfo& operator=(IMOnlineUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMOnlineUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMOnlineUserInfo* internal_default_instance() {
    return reinterpret_cast<const IMOnlineUserInfo*>(
               &_IMOnlineUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMOnlineUserInfo& a, IMOnlineUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IMOnlineUserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMOnlineUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMOnlineUserInfo* New() const final {
    return new IMOnlineUserInfo();
  }

  IMOnlineUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMOnlineUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMOnlineUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMOnlineUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMOnlineUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMOnlineUserInfo";
  }
  protected:
  explicit IMOnlineUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatListFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  int user_stat_list_size() const;
  private:
  int _internal_user_stat_list_size() const;
  public:
  void clear_user_stat_list();
  ::IM::BaseDefine::ServerUserStat* mutable_user_stat_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
      mutable_user_stat_list();
  private:
  const ::IM::BaseDefine::ServerUserStat& _internal_user_stat_list(int index) const;
  ::IM::BaseDefine::ServerUserStat* _internal_add_user_stat_list();
  public:
  const ::IM::BaseDefine::ServerUserStat& user_stat_list(int index) const;
  ::IM::BaseDefine::ServerUserStat* add_user_stat_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
      user_stat_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMOnlineUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat > user_stat_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMMsgServInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMMsgServInfo) */ {
 public:
  inline IMMsgServInfo() : IMMsgServInfo(nullptr) {}
  ~IMMsgServInfo() override;
  explicit constexpr IMMsgServInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgServInfo(const IMMsgServInfo& from);
  IMMsgServInfo(IMMsgServInfo&& from) noexcept
    : IMMsgServInfo() {
    *this = ::std::move(from);
  }

  inline IMMsgServInfo& operator=(const IMMsgServInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgServInfo& operator=(IMMsgServInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgServInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgServInfo* internal_default_instance() {
    return reinterpret_cast<const IMMsgServInfo*>(
               &_IMMsgServInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMMsgServInfo& a, IMMsgServInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgServInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgServInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServInfo* New() const final {
    return new IMMsgServInfo();
  }

  IMMsgServInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgServInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgServInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgServInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMMsgServInfo";
  }
  protected:
  explicit IMMsgServInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIp1FieldNumber = 1,
    kIp2FieldNumber = 2,
    kHostNameFieldNumber = 6,
    kPortFieldNumber = 3,
    kMaxConnCntFieldNumber = 4,
    kCurConnCntFieldNumber = 5,
  };
  // string ip1 = 1;
  void clear_ip1();
  const std::string& ip1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip1();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip1();
  void set_allocated_ip1(std::string* ip1);
  private:
  const std::string& _internal_ip1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip1(const std::string& value);
  std::string* _internal_mutable_ip1();
  public:

  // string ip2 = 2;
  void clear_ip2();
  const std::string& ip2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip2();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip2();
  void set_allocated_ip2(std::string* ip2);
  private:
  const std::string& _internal_ip2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip2(const std::string& value);
  std::string* _internal_mutable_ip2();
  public:

  // string host_name = 6;
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_conn_cnt = 4;
  void clear_max_conn_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_conn_cnt() const;
  void set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_conn_cnt() const;
  void _internal_set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cur_conn_cnt = 5;
  void clear_cur_conn_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_conn_cnt() const;
  void set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_conn_cnt() const;
  void _internal_set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_conn_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_conn_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMUserStatusUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMUserStatusUpdate) */ {
 public:
  inline IMUserStatusUpdate() : IMUserStatusUpdate(nullptr) {}
  ~IMUserStatusUpdate() override;
  explicit constexpr IMUserStatusUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUserStatusUpdate(const IMUserStatusUpdate& from);
  IMUserStatusUpdate(IMUserStatusUpdate&& from) noexcept
    : IMUserStatusUpdate() {
    *this = ::std::move(from);
  }

  inline IMUserStatusUpdate& operator=(const IMUserStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUserStatusUpdate& operator=(IMUserStatusUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUserStatusUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUserStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const IMUserStatusUpdate*>(
               &_IMUserStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMUserStatusUpdate& a, IMUserStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUserStatusUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUserStatusUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUserStatusUpdate* New() const final {
    return new IMUserStatusUpdate();
  }

  IMUserStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUserStatusUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUserStatusUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUserStatusUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUserStatusUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMUserStatusUpdate";
  }
  protected:
  explicit IMUserStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatusFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kClientTypeFieldNumber = 3,
  };
  // uint32 user_status = 1;
  void clear_user_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_status() const;
  void set_user_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_status() const;
  void _internal_set_user_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.ClientType client_type = 3;
  void clear_client_type();
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_client_type() const;
  void _internal_set_client_type(::IM::BaseDefine::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserStatusUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMUserCntUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMUserCntUpdate) */ {
 public:
  inline IMUserCntUpdate() : IMUserCntUpdate(nullptr) {}
  ~IMUserCntUpdate() override;
  explicit constexpr IMUserCntUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUserCntUpdate(const IMUserCntUpdate& from);
  IMUserCntUpdate(IMUserCntUpdate&& from) noexcept
    : IMUserCntUpdate() {
    *this = ::std::move(from);
  }

  inline IMUserCntUpdate& operator=(const IMUserCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUserCntUpdate& operator=(IMUserCntUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUserCntUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUserCntUpdate* internal_default_instance() {
    return reinterpret_cast<const IMUserCntUpdate*>(
               &_IMUserCntUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMUserCntUpdate& a, IMUserCntUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUserCntUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUserCntUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUserCntUpdate* New() const final {
    return new IMUserCntUpdate();
  }

  IMUserCntUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUserCntUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUserCntUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUserCntUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUserCntUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMUserCntUpdate";
  }
  protected:
  explicit IMUserCntUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserActionFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // uint32 user_action = 1;
  void clear_user_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_action() const;
  void set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_action() const;
  void _internal_set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserCntUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMServerKickUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMServerKickUser) */ {
 public:
  inline IMServerKickUser() : IMServerKickUser(nullptr) {}
  ~IMServerKickUser() override;
  explicit constexpr IMServerKickUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMServerKickUser(const IMServerKickUser& from);
  IMServerKickUser(IMServerKickUser&& from) noexcept
    : IMServerKickUser() {
    *this = ::std::move(from);
  }

  inline IMServerKickUser& operator=(const IMServerKickUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMServerKickUser& operator=(IMServerKickUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMServerKickUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMServerKickUser* internal_default_instance() {
    return reinterpret_cast<const IMServerKickUser*>(
               &_IMServerKickUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMServerKickUser& a, IMServerKickUser& b) {
    a.Swap(&b);
  }
  inline void Swap(IMServerKickUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMServerKickUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMServerKickUser* New() const final {
    return new IMServerKickUser();
  }

  IMServerKickUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMServerKickUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMServerKickUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMServerKickUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMServerKickUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMServerKickUser";
  }
  protected:
  explicit IMServerKickUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kClientTypeFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.ClientType client_type = 2;
  void clear_client_type();
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_client_type() const;
  void _internal_set_client_type(::IM::BaseDefine::ClientType value);
  public:

  // uint32 reason = 3;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerKickUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int client_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMServerPCLoginStatusNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMServerPCLoginStatusNotify) */ {
 public:
  inline IMServerPCLoginStatusNotify() : IMServerPCLoginStatusNotify(nullptr) {}
  ~IMServerPCLoginStatusNotify() override;
  explicit constexpr IMServerPCLoginStatusNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from);
  IMServerPCLoginStatusNotify(IMServerPCLoginStatusNotify&& from) noexcept
    : IMServerPCLoginStatusNotify() {
    *this = ::std::move(from);
  }

  inline IMServerPCLoginStatusNotify& operator=(const IMServerPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMServerPCLoginStatusNotify& operator=(IMServerPCLoginStatusNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMServerPCLoginStatusNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMServerPCLoginStatusNotify* internal_default_instance() {
    return reinterpret_cast<const IMServerPCLoginStatusNotify*>(
               &_IMServerPCLoginStatusNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IMServerPCLoginStatusNotify& a, IMServerPCLoginStatusNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMServerPCLoginStatusNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMServerPCLoginStatusNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMServerPCLoginStatusNotify* New() const final {
    return new IMServerPCLoginStatusNotify();
  }

  IMServerPCLoginStatusNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMServerPCLoginStatusNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMServerPCLoginStatusNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMServerPCLoginStatusNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMServerPCLoginStatusNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMServerPCLoginStatusNotify";
  }
  protected:
  explicit IMServerPCLoginStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLoginStatusFieldNumber = 2,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 login_status = 2;
  void clear_login_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_status() const;
  void set_login_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_status() const;
  void _internal_set_login_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerPCLoginStatusNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMPushToUserReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMPushToUserReq) */ {
 public:
  inline IMPushToUserReq() : IMPushToUserReq(nullptr) {}
  ~IMPushToUserReq() override;
  explicit constexpr IMPushToUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMPushToUserReq(const IMPushToUserReq& from);
  IMPushToUserReq(IMPushToUserReq&& from) noexcept
    : IMPushToUserReq() {
    *this = ::std::move(from);
  }

  inline IMPushToUserReq& operator=(const IMPushToUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMPushToUserReq& operator=(IMPushToUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMPushToUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMPushToUserReq* internal_default_instance() {
    return reinterpret_cast<const IMPushToUserReq*>(
               &_IMPushToUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IMPushToUserReq& a, IMPushToUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMPushToUserReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMPushToUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMPushToUserReq* New() const final {
    return new IMPushToUserReq();
  }

  IMPushToUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMPushToUserReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMPushToUserReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMPushToUserReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMPushToUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMPushToUserReq";
  }
  protected:
  explicit IMPushToUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTokenListFieldNumber = 3,
    kFlashFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  int user_token_list_size() const;
  private:
  int _internal_user_token_list_size() const;
  public:
  void clear_user_token_list();
  ::IM::BaseDefine::UserTokenInfo* mutable_user_token_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_list();
  private:
  const ::IM::BaseDefine::UserTokenInfo& _internal_user_token_list(int index) const;
  ::IM::BaseDefine::UserTokenInfo* _internal_add_user_token_list();
  public:
  const ::IM::BaseDefine::UserTokenInfo& user_token_list(int index) const;
  ::IM::BaseDefine::UserTokenInfo* add_user_token_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_list() const;

  // string flash = 1;
  void clear_flash();
  const std::string& flash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flash();
  PROTOBUF_MUST_USE_RESULT std::string* release_flash();
  void set_allocated_flash(std::string* flash);
  private:
  const std::string& _internal_flash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flash(const std::string& value);
  std::string* _internal_mutable_flash();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMPushToUserRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMPushToUserRsp) */ {
 public:
  inline IMPushToUserRsp() : IMPushToUserRsp(nullptr) {}
  ~IMPushToUserRsp() override;
  explicit constexpr IMPushToUserRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMPushToUserRsp(const IMPushToUserRsp& from);
  IMPushToUserRsp(IMPushToUserRsp&& from) noexcept
    : IMPushToUserRsp() {
    *this = ::std::move(from);
  }

  inline IMPushToUserRsp& operator=(const IMPushToUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMPushToUserRsp& operator=(IMPushToUserRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMPushToUserRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMPushToUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMPushToUserRsp*>(
               &_IMPushToUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IMPushToUserRsp& a, IMPushToUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMPushToUserRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMPushToUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMPushToUserRsp* New() const final {
    return new IMPushToUserRsp();
  }

  IMPushToUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMPushToUserRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMPushToUserRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMPushToUserRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMPushToUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMPushToUserRsp";
  }
  protected:
  explicit IMPushToUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushResultListFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  int push_result_list_size() const;
  private:
  int _internal_push_result_list_size() const;
  public:
  void clear_push_result_list();
  ::IM::BaseDefine::PushResult* mutable_push_result_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
      mutable_push_result_list();
  private:
  const ::IM::BaseDefine::PushResult& _internal_push_result_list(int index) const;
  ::IM::BaseDefine::PushResult* _internal_add_push_result_list();
  public:
  const ::IM::BaseDefine::PushResult& push_result_list(int index) const;
  ::IM::BaseDefine::PushResult* add_push_result_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
      push_result_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::PushResult > push_result_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMGroupGetShieldReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGroupGetShieldReq) */ {
 public:
  inline IMGroupGetShieldReq() : IMGroupGetShieldReq(nullptr) {}
  ~IMGroupGetShieldReq() override;
  explicit constexpr IMGroupGetShieldReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupGetShieldReq(const IMGroupGetShieldReq& from);
  IMGroupGetShieldReq(IMGroupGetShieldReq&& from) noexcept
    : IMGroupGetShieldReq() {
    *this = ::std::move(from);
  }

  inline IMGroupGetShieldReq& operator=(const IMGroupGetShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupGetShieldReq& operator=(IMGroupGetShieldReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupGetShieldReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupGetShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupGetShieldReq*>(
               &_IMGroupGetShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IMGroupGetShieldReq& a, IMGroupGetShieldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupGetShieldReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupGetShieldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupGetShieldReq* New() const final {
    return new IMGroupGetShieldReq();
  }

  IMGroupGetShieldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupGetShieldReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupGetShieldReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupGetShieldReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupGetShieldReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMGroupGetShieldReq";
  }
  protected:
  explicit IMGroupGetShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 1,
  };
  // repeated uint32 user_id = 2;
  int user_id_size() const;
  private:
  int _internal_user_id_size() const;
  public:
  void clear_user_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_user_id() const;
  void _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_user_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id(int index) const;
  void set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_user_id();

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > user_id_;
  mutable std::atomic<int> _user_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMGroupGetShieldRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGroupGetShieldRsp) */ {
 public:
  inline IMGroupGetShieldRsp() : IMGroupGetShieldRsp(nullptr) {}
  ~IMGroupGetShieldRsp() override;
  explicit constexpr IMGroupGetShieldRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from);
  IMGroupGetShieldRsp(IMGroupGetShieldRsp&& from) noexcept
    : IMGroupGetShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupGetShieldRsp& operator=(const IMGroupGetShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGroupGetShieldRsp& operator=(IMGroupGetShieldRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGroupGetShieldRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGroupGetShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupGetShieldRsp*>(
               &_IMGroupGetShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IMGroupGetShieldRsp& a, IMGroupGetShieldRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGroupGetShieldRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGroupGetShieldRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGroupGetShieldRsp* New() const final {
    return new IMGroupGetShieldRsp();
  }

  IMGroupGetShieldRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGroupGetShieldRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGroupGetShieldRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGroupGetShieldRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGroupGetShieldRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMGroupGetShieldRsp";
  }
  protected:
  explicit IMGroupGetShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShieldStatusListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  int shield_status_list_size() const;
  private:
  int _internal_shield_status_list_size() const;
  public:
  void clear_shield_status_list();
  ::IM::BaseDefine::ShieldStatus* mutable_shield_status_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
      mutable_shield_status_list();
  private:
  const ::IM::BaseDefine::ShieldStatus& _internal_shield_status_list(int index) const;
  ::IM::BaseDefine::ShieldStatus* _internal_add_shield_status_list();
  public:
  const ::IM::BaseDefine::ShieldStatus& shield_status_list(int index) const;
  ::IM::BaseDefine::ShieldStatus* add_shield_status_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
      shield_status_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus > shield_status_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMFileTransferReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileTransferReq) */ {
 public:
  inline IMFileTransferReq() : IMFileTransferReq(nullptr) {}
  ~IMFileTransferReq() override;
  explicit constexpr IMFileTransferReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMFileTransferReq(const IMFileTransferReq& from);
  IMFileTransferReq(IMFileTransferReq&& from) noexcept
    : IMFileTransferReq() {
    *this = ::std::move(from);
  }

  inline IMFileTransferReq& operator=(const IMFileTransferReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFileTransferReq& operator=(IMFileTransferReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMFileTransferReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMFileTransferReq* internal_default_instance() {
    return reinterpret_cast<const IMFileTransferReq*>(
               &_IMFileTransferReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IMFileTransferReq& a, IMFileTransferReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFileTransferReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFileTransferReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFileTransferReq* New() const final {
    return new IMFileTransferReq();
  }

  IMFileTransferReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFileTransferReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMFileTransferReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMFileTransferReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMFileTransferReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMFileTransferReq";
  }
  protected:
  explicit IMFileTransferReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
    kFileSizeFieldNumber = 4,
    kTransModeFieldNumber = 5,
  };
  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_user_id = 2;
  void clear_to_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_user_id() const;
  void set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_user_id() const;
  void _internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.TransferFileType trans_mode = 5;
  void clear_trans_mode();
  ::IM::BaseDefine::TransferFileType trans_mode() const;
  void set_trans_mode(::IM::BaseDefine::TransferFileType value);
  private:
  ::IM::BaseDefine::TransferFileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::IM::BaseDefine::TransferFileType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  int trans_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMFileTransferRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileTransferRsp) */ {
 public:
  inline IMFileTransferRsp() : IMFileTransferRsp(nullptr) {}
  ~IMFileTransferRsp() override;
  explicit constexpr IMFileTransferRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMFileTransferRsp(const IMFileTransferRsp& from);
  IMFileTransferRsp(IMFileTransferRsp&& from) noexcept
    : IMFileTransferRsp() {
    *this = ::std::move(from);
  }

  inline IMFileTransferRsp& operator=(const IMFileTransferRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFileTransferRsp& operator=(IMFileTransferRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMFileTransferRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMFileTransferRsp* internal_default_instance() {
    return reinterpret_cast<const IMFileTransferRsp*>(
               &_IMFileTransferRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IMFileTransferRsp& a, IMFileTransferRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFileTransferRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFileTransferRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFileTransferRsp* New() const final {
    return new IMFileTransferRsp();
  }

  IMFileTransferRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFileTransferRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMFileTransferRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMFileTransferRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMFileTransferRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMFileTransferRsp";
  }
  protected:
  explicit IMFileTransferRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 4,
    kTaskIdFieldNumber = 6,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
    kToUserIdFieldNumber = 3,
    kFileSizeFieldNumber = 5,
    kTransModeFieldNumber = 7,
  };
  // string file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string task_id = 6;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 from_user_id = 2;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_user_id = 3;
  void clear_to_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_user_id() const;
  void set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_user_id() const;
  void _internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 file_size = 5;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.TransferFileType trans_mode = 7;
  void clear_trans_mode();
  ::IM::BaseDefine::TransferFileType trans_mode() const;
  void set_trans_mode(::IM::BaseDefine::TransferFileType value);
  private:
  ::IM::BaseDefine::TransferFileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::IM::BaseDefine::TransferFileType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  int trans_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMFileServerIPReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:IM.Server.IMFileServerIPReq) */ {
 public:
  inline IMFileServerIPReq() : IMFileServerIPReq(nullptr) {}
  explicit constexpr IMFileServerIPReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMFileServerIPReq(const IMFileServerIPReq& from);
  IMFileServerIPReq(IMFileServerIPReq&& from) noexcept
    : IMFileServerIPReq() {
    *this = ::std::move(from);
  }

  inline IMFileServerIPReq& operator=(const IMFileServerIPReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFileServerIPReq& operator=(IMFileServerIPReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMFileServerIPReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMFileServerIPReq* internal_default_instance() {
    return reinterpret_cast<const IMFileServerIPReq*>(
               &_IMFileServerIPReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IMFileServerIPReq& a, IMFileServerIPReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFileServerIPReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFileServerIPReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFileServerIPReq* New() const final {
    return new IMFileServerIPReq();
  }

  IMFileServerIPReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFileServerIPReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IMFileServerIPReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IMFileServerIPReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMFileServerIPReq";
  }
  protected:
  explicit IMFileServerIPReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// -------------------------------------------------------------------

class IMFileServerIPRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileServerIPRsp) */ {
 public:
  inline IMFileServerIPRsp() : IMFileServerIPRsp(nullptr) {}
  ~IMFileServerIPRsp() override;
  explicit constexpr IMFileServerIPRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMFileServerIPRsp(const IMFileServerIPRsp& from);
  IMFileServerIPRsp(IMFileServerIPRsp&& from) noexcept
    : IMFileServerIPRsp() {
    *this = ::std::move(from);
  }

  inline IMFileServerIPRsp& operator=(const IMFileServerIPRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFileServerIPRsp& operator=(IMFileServerIPRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMFileServerIPRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMFileServerIPRsp* internal_default_instance() {
    return reinterpret_cast<const IMFileServerIPRsp*>(
               &_IMFileServerIPRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IMFileServerIPRsp& a, IMFileServerIPRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFileServerIPRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFileServerIPRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFileServerIPRsp* New() const final {
    return new IMFileServerIPRsp();
  }

  IMFileServerIPRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFileServerIPRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMFileServerIPRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMFileServerIPRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMFileServerIPRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Server.IMFileServerIPRsp";
  }
  protected:
  explicit IMFileServerIPRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrListFieldNumber = 1,
  };
  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  int ip_addr_list_size() const;
  private:
  int _internal_ip_addr_list_size() const;
  public:
  void clear_ip_addr_list();
  ::IM::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
      mutable_ip_addr_list();
  private:
  const ::IM::BaseDefine::IpAddr& _internal_ip_addr_list(int index) const;
  ::IM::BaseDefine::IpAddr* _internal_add_ip_addr_list();
  public:
  const ::IM::BaseDefine::IpAddr& ip_addr_list(int index) const;
  ::IM::BaseDefine::IpAddr* add_ip_addr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
      ip_addr_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::IpAddr > ip_addr_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMStopReceivePacket

// uint32 result = 1;
inline void IMStopReceivePacket::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMStopReceivePacket::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMStopReceivePacket::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMStopReceivePacket.result)
  return _internal_result();
}
inline void IMStopReceivePacket::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void IMStopReceivePacket::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMStopReceivePacket.result)
}

// -------------------------------------------------------------------

// IMValidateReq

// string user_name = 1;
inline void IMValidateReq::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& IMValidateReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.user_name)
}
inline std::string* IMValidateReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.user_name)
  return _s;
}
inline const std::string& IMValidateReq::_internal_user_name() const {
  return user_name_.Get();
}
inline void IMValidateReq::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateReq::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.user_name)
}

// string password = 2;
inline void IMValidateReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& IMValidateReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.password)
}
inline std::string* IMValidateReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.password)
  return _s;
}
inline const std::string& IMValidateReq::_internal_password() const {
  return password_.Get();
}
inline void IMValidateReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.password)
}

// bytes attach_data = 20;
inline void IMValidateReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMValidateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.attach_data)
}
inline std::string* IMValidateReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.attach_data)
  return _s;
}
inline const std::string& IMValidateReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMValidateReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.attach_data)
}

// -------------------------------------------------------------------

// IMValidateRsp

// string user_name = 1;
inline void IMValidateRsp::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& IMValidateRsp::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateRsp::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.user_name)
}
inline std::string* IMValidateRsp::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_name)
  return _s;
}
inline const std::string& IMValidateRsp::_internal_user_name() const {
  return user_name_.Get();
}
inline void IMValidateRsp::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateRsp::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_name)
}

// uint32 result_code = 2;
inline void IMValidateRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMValidateRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMValidateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_code)
  return _internal_result_code();
}
inline void IMValidateRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMValidateRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_code)
}

// string result_string = 3;
inline void IMValidateRsp::clear_result_string() {
  result_string_.ClearToEmpty();
}
inline const std::string& IMValidateRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_string)
  return _internal_result_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateRsp::set_result_string(ArgT0&& arg0, ArgT... args) {
 
 result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_string)
}
inline std::string* IMValidateRsp::mutable_result_string() {
  std::string* _s = _internal_mutable_result_string();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.result_string)
  return _s;
}
inline const std::string& IMValidateRsp::_internal_result_string() const {
  return result_string_.Get();
}
inline void IMValidateRsp::_internal_set_result_string(const std::string& value) {
  
  result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::_internal_mutable_result_string() {
  
  return result_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateRsp::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.result_string)
}

// .IM.BaseDefine.UserInfo user_info = 4;
inline bool IMValidateRsp::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool IMValidateRsp::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMValidateRsp::_internal_user_info() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::BaseDefine::UserInfo&>(
      ::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMValidateRsp::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_info)
  return _internal_user_info();
}
inline void IMValidateRsp::unsafe_arena_set_allocated_user_info(
    ::IM::BaseDefine::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Server.IMValidateRsp.user_info)
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::release_user_info() {
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.user_info)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArenaForAllocation());
    user_info_ = p;
  }
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::mutable_user_info() {
  ::IM::BaseDefine::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_info)
  return _msg;
}
inline void IMValidateRsp::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_info)
}

// bytes attach_data = 20;
inline void IMValidateRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMValidateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMValidateRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.attach_data)
}
inline std::string* IMValidateRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.attach_data)
  return _s;
}
inline const std::string& IMValidateRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMValidateRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMValidateRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMValidateRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenReq

// repeated uint32 user_id = 1;
inline int IMGetDeviceTokenReq::_internal_user_id_size() const {
  return user_id_.size();
}
inline int IMGetDeviceTokenReq::user_id_size() const {
  return _internal_user_id_size();
}
inline void IMGetDeviceTokenReq::clear_user_id() {
  user_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetDeviceTokenReq::_internal_user_id(int index) const {
  return user_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetDeviceTokenReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.user_id)
  return _internal_user_id(index);
}
inline void IMGetDeviceTokenReq::set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline void IMGetDeviceTokenReq::_internal_add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_.Add(value);
}
inline void IMGetDeviceTokenReq::add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_user_id(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGetDeviceTokenReq::_internal_user_id() const {
  return user_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGetDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return _internal_user_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGetDeviceTokenReq::_internal_mutable_user_id() {
  return &user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGetDeviceTokenReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return _internal_mutable_user_id();
}

// bytes attach_data = 20;
inline void IMGetDeviceTokenReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetDeviceTokenReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline std::string* IMGetDeviceTokenReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenReq.attach_data)
  return _s;
}
inline const std::string& IMGetDeviceTokenReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetDeviceTokenReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetDeviceTokenReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetDeviceTokenReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGetDeviceTokenReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetDeviceTokenReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenRsp

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
inline int IMGetDeviceTokenRsp::_internal_user_token_info_size() const {
  return user_token_info_.size();
}
inline int IMGetDeviceTokenRsp::user_token_info_size() const {
  return _internal_user_token_info_size();
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGetDeviceTokenRsp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return &user_token_info_;
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGetDeviceTokenRsp::_internal_user_token_info(int index) const {
  return user_token_info_.Get(index);
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGetDeviceTokenRsp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return _internal_user_token_info(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::_internal_add_user_token_info() {
  return user_token_info_.Add();
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::add_user_token_info() {
  ::IM::BaseDefine::UserTokenInfo* _add = _internal_add_user_token_info();
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGetDeviceTokenRsp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_;
}

// bytes attach_data = 20;
inline void IMGetDeviceTokenRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetDeviceTokenRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline std::string* IMGetDeviceTokenRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return _s;
}
inline const std::string& IMGetDeviceTokenRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetDeviceTokenRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetDeviceTokenRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetDeviceTokenRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetDeviceTokenRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRoleSet

// uint32 master = 1;
inline void IMRoleSet::clear_master() {
  master_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRoleSet::_internal_master() const {
  return master_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRoleSet::master() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRoleSet.master)
  return _internal_master();
}
inline void IMRoleSet::_internal_set_master(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  master_ = value;
}
inline void IMRoleSet::set_master(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_master(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMRoleSet.master)
}

// -------------------------------------------------------------------

// IMOnlineUserInfo

// repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
inline int IMOnlineUserInfo::_internal_user_stat_list_size() const {
  return user_stat_list_.size();
}
inline int IMOnlineUserInfo::user_stat_list_size() const {
  return _internal_user_stat_list_size();
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
IMOnlineUserInfo::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return &user_stat_list_;
}
inline const ::IM::BaseDefine::ServerUserStat& IMOnlineUserInfo::_internal_user_stat_list(int index) const {
  return user_stat_list_.Get(index);
}
inline const ::IM::BaseDefine::ServerUserStat& IMOnlineUserInfo::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOnlineUserInfo.user_stat_list)
  return _internal_user_stat_list(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::_internal_add_user_stat_list() {
  return user_stat_list_.Add();
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::add_user_stat_list() {
  ::IM::BaseDefine::ServerUserStat* _add = _internal_add_user_stat_list();
  // @@protoc_insertion_point(field_add:IM.Server.IMOnlineUserInfo.user_stat_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
IMOnlineUserInfo::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_;
}

// -------------------------------------------------------------------

// IMMsgServInfo

// string ip1 = 1;
inline void IMMsgServInfo::clear_ip1() {
  ip1_.ClearToEmpty();
}
inline const std::string& IMMsgServInfo::ip1() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip1)
  return _internal_ip1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgServInfo::set_ip1(ArgT0&& arg0, ArgT... args) {
 
 ip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip1)
}
inline std::string* IMMsgServInfo::mutable_ip1() {
  std::string* _s = _internal_mutable_ip1();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip1)
  return _s;
}
inline const std::string& IMMsgServInfo::_internal_ip1() const {
  return ip1_.Get();
}
inline void IMMsgServInfo::_internal_set_ip1(const std::string& value) {
  
  ip1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::_internal_mutable_ip1() {
  
  return ip1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::release_ip1() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.ip1)
  return ip1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgServInfo::set_allocated_ip1(std::string* ip1) {
  if (ip1 != nullptr) {
    
  } else {
    
  }
  ip1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip1)
}

// string ip2 = 2;
inline void IMMsgServInfo::clear_ip2() {
  ip2_.ClearToEmpty();
}
inline const std::string& IMMsgServInfo::ip2() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip2)
  return _internal_ip2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgServInfo::set_ip2(ArgT0&& arg0, ArgT... args) {
 
 ip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip2)
}
inline std::string* IMMsgServInfo::mutable_ip2() {
  std::string* _s = _internal_mutable_ip2();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip2)
  return _s;
}
inline const std::string& IMMsgServInfo::_internal_ip2() const {
  return ip2_.Get();
}
inline void IMMsgServInfo::_internal_set_ip2(const std::string& value) {
  
  ip2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::_internal_mutable_ip2() {
  
  return ip2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::release_ip2() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.ip2)
  return ip2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgServInfo::set_allocated_ip2(std::string* ip2) {
  if (ip2 != nullptr) {
    
  } else {
    
  }
  ip2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip2)
}

// uint32 port = 3;
inline void IMMsgServInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::port() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.port)
  return _internal_port();
}
inline void IMMsgServInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void IMMsgServInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.port)
}

// uint32 max_conn_cnt = 4;
inline void IMMsgServInfo::clear_max_conn_cnt() {
  max_conn_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_max_conn_cnt() const {
  return max_conn_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::max_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.max_conn_cnt)
  return _internal_max_conn_cnt();
}
inline void IMMsgServInfo::_internal_set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_conn_cnt_ = value;
}
inline void IMMsgServInfo::set_max_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_conn_cnt(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.max_conn_cnt)
}

// uint32 cur_conn_cnt = 5;
inline void IMMsgServInfo::clear_cur_conn_cnt() {
  cur_conn_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::_internal_cur_conn_cnt() const {
  return cur_conn_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServInfo::cur_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.cur_conn_cnt)
  return _internal_cur_conn_cnt();
}
inline void IMMsgServInfo::_internal_set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_conn_cnt_ = value;
}
inline void IMMsgServInfo::set_cur_conn_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_conn_cnt(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.cur_conn_cnt)
}

// string host_name = 6;
inline void IMMsgServInfo::clear_host_name() {
  host_name_.ClearToEmpty();
}
inline const std::string& IMMsgServInfo::host_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgServInfo::set_host_name(ArgT0&& arg0, ArgT... args) {
 
 host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.host_name)
}
inline std::string* IMMsgServInfo::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.host_name)
  return _s;
}
inline const std::string& IMMsgServInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void IMMsgServInfo::_internal_set_host_name(const std::string& value) {
  
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::_internal_mutable_host_name() {
  
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgServInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.host_name)
  return host_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgServInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.host_name)
}

// -------------------------------------------------------------------

// IMUserStatusUpdate

// uint32 user_status = 1;
inline void IMUserStatusUpdate::clear_user_status() {
  user_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserStatusUpdate::_internal_user_status() const {
  return user_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserStatusUpdate::user_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_status)
  return _internal_user_status();
}
inline void IMUserStatusUpdate::_internal_set_user_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_status_ = value;
}
inline void IMUserStatusUpdate::set_user_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_status(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_status)
}

// uint32 user_id = 2;
inline void IMUserStatusUpdate::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserStatusUpdate::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserStatusUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_id)
  return _internal_user_id();
}
inline void IMUserStatusUpdate::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMUserStatusUpdate::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_id)
}

// .IM.BaseDefine.ClientType client_type = 3;
inline void IMUserStatusUpdate::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMUserStatusUpdate::_internal_client_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline ::IM::BaseDefine::ClientType IMUserStatusUpdate::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.client_type)
  return _internal_client_type();
}
inline void IMUserStatusUpdate::_internal_set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
}
inline void IMUserStatusUpdate::set_client_type(::IM::BaseDefine::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.client_type)
}

// -------------------------------------------------------------------

// IMUserCntUpdate

// uint32 user_action = 1;
inline void IMUserCntUpdate::clear_user_action() {
  user_action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::_internal_user_action() const {
  return user_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::user_action() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_action)
  return _internal_user_action();
}
inline void IMUserCntUpdate::_internal_set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_action_ = value;
}
inline void IMUserCntUpdate::set_user_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_action(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_action)
}

// uint32 user_id = 2;
inline void IMUserCntUpdate::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUserCntUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_id)
  return _internal_user_id();
}
inline void IMUserCntUpdate::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMUserCntUpdate::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_id)
}

// -------------------------------------------------------------------

// IMServerKickUser

// uint32 user_id = 1;
inline void IMServerKickUser::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerKickUser::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.user_id)
  return _internal_user_id();
}
inline void IMServerKickUser::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMServerKickUser::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.user_id)
}

// .IM.BaseDefine.ClientType client_type = 2;
inline void IMServerKickUser::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMServerKickUser::_internal_client_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline ::IM::BaseDefine::ClientType IMServerKickUser::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.client_type)
  return _internal_client_type();
}
inline void IMServerKickUser::_internal_set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
}
inline void IMServerKickUser::set_client_type(::IM::BaseDefine::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.client_type)
}

// uint32 reason = 3;
inline void IMServerKickUser::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerKickUser::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerKickUser::reason() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.reason)
  return _internal_reason();
}
inline void IMServerKickUser::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void IMServerKickUser::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.reason)
}

// -------------------------------------------------------------------

// IMServerPCLoginStatusNotify

// uint32 user_id = 1;
inline void IMServerPCLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerPCLoginStatusNotify::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.user_id)
  return _internal_user_id();
}
inline void IMServerPCLoginStatusNotify::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMServerPCLoginStatusNotify::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.user_id)
}

// uint32 login_status = 2;
inline void IMServerPCLoginStatusNotify::clear_login_status() {
  login_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerPCLoginStatusNotify::_internal_login_status() const {
  return login_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMServerPCLoginStatusNotify::login_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.login_status)
  return _internal_login_status();
}
inline void IMServerPCLoginStatusNotify::_internal_set_login_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_status_ = value;
}
inline void IMServerPCLoginStatusNotify::set_login_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_status(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.login_status)
}

// -------------------------------------------------------------------

// IMPushToUserReq

// string flash = 1;
inline void IMPushToUserReq::clear_flash() {
  flash_.ClearToEmpty();
}
inline const std::string& IMPushToUserReq::flash() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.flash)
  return _internal_flash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMPushToUserReq::set_flash(ArgT0&& arg0, ArgT... args) {
 
 flash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.flash)
}
inline std::string* IMPushToUserReq::mutable_flash() {
  std::string* _s = _internal_mutable_flash();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.flash)
  return _s;
}
inline const std::string& IMPushToUserReq::_internal_flash() const {
  return flash_.Get();
}
inline void IMPushToUserReq::_internal_set_flash(const std::string& value) {
  
  flash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMPushToUserReq::_internal_mutable_flash() {
  
  return flash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMPushToUserReq::release_flash() {
  // @@protoc_insertion_point(field_release:IM.Server.IMPushToUserReq.flash)
  return flash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMPushToUserReq::set_allocated_flash(std::string* flash) {
  if (flash != nullptr) {
    
  } else {
    
  }
  flash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.flash)
}

// string data = 2;
inline void IMPushToUserReq::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& IMPushToUserReq::data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMPushToUserReq::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.data)
}
inline std::string* IMPushToUserReq::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.data)
  return _s;
}
inline const std::string& IMPushToUserReq::_internal_data() const {
  return data_.Get();
}
inline void IMPushToUserReq::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMPushToUserReq::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMPushToUserReq::release_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMPushToUserReq.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMPushToUserReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.data)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
inline int IMPushToUserReq::_internal_user_token_list_size() const {
  return user_token_list_.size();
}
inline int IMPushToUserReq::user_token_list_size() const {
  return _internal_user_token_list_size();
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::mutable_user_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMPushToUserReq::mutable_user_token_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserReq.user_token_list)
  return &user_token_list_;
}
inline const ::IM::BaseDefine::UserTokenInfo& IMPushToUserReq::_internal_user_token_list(int index) const {
  return user_token_list_.Get(index);
}
inline const ::IM::BaseDefine::UserTokenInfo& IMPushToUserReq::user_token_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.user_token_list)
  return _internal_user_token_list(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::_internal_add_user_token_list() {
  return user_token_list_.Add();
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::add_user_token_list() {
  ::IM::BaseDefine::UserTokenInfo* _add = _internal_add_user_token_list();
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserReq.user_token_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMPushToUserReq::user_token_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_;
}

// -------------------------------------------------------------------

// IMPushToUserRsp

// repeated .IM.BaseDefine.PushResult push_result_list = 1;
inline int IMPushToUserRsp::_internal_push_result_list_size() const {
  return push_result_list_.size();
}
inline int IMPushToUserRsp::push_result_list_size() const {
  return _internal_push_result_list_size();
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::mutable_push_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
IMPushToUserRsp::mutable_push_result_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserRsp.push_result_list)
  return &push_result_list_;
}
inline const ::IM::BaseDefine::PushResult& IMPushToUserRsp::_internal_push_result_list(int index) const {
  return push_result_list_.Get(index);
}
inline const ::IM::BaseDefine::PushResult& IMPushToUserRsp::push_result_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserRsp.push_result_list)
  return _internal_push_result_list(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::_internal_add_push_result_list() {
  return push_result_list_.Add();
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::add_push_result_list() {
  ::IM::BaseDefine::PushResult* _add = _internal_add_push_result_list();
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserRsp.push_result_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
IMPushToUserRsp::push_result_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_;
}

// -------------------------------------------------------------------

// IMGroupGetShieldReq

// uint32 group_id = 1;
inline void IMGroupGetShieldReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldReq::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.group_id)
  return _internal_group_id();
}
inline void IMGroupGetShieldReq::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupGetShieldReq::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.group_id)
}

// repeated uint32 user_id = 2;
inline int IMGroupGetShieldReq::_internal_user_id_size() const {
  return user_id_.size();
}
inline int IMGroupGetShieldReq::user_id_size() const {
  return _internal_user_id_size();
}
inline void IMGroupGetShieldReq::clear_user_id() {
  user_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldReq::_internal_user_id(int index) const {
  return user_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.user_id)
  return _internal_user_id(index);
}
inline void IMGroupGetShieldReq::set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.user_id)
}
inline void IMGroupGetShieldReq::_internal_add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  user_id_.Add(value);
}
inline void IMGroupGetShieldReq::add_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_user_id(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldReq.user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupGetShieldReq::_internal_user_id() const {
  return user_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGroupGetShieldReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldReq.user_id)
  return _internal_user_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupGetShieldReq::_internal_mutable_user_id() {
  return &user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGroupGetShieldReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldReq.user_id)
  return _internal_mutable_user_id();
}

// bytes attach_data = 20;
inline void IMGroupGetShieldReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupGetShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupGetShieldReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline std::string* IMGroupGetShieldReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldReq.attach_data)
  return _s;
}
inline const std::string& IMGroupGetShieldReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupGetShieldReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupGetShieldReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupGetShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGroupGetShieldReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupGetShieldReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetShieldRsp

// uint32 group_id = 1;
inline void IMGroupGetShieldRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldRsp::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGroupGetShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.group_id)
  return _internal_group_id();
}
inline void IMGroupGetShieldRsp::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void IMGroupGetShieldRsp::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.group_id)
}

// repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
inline int IMGroupGetShieldRsp::_internal_shield_status_list_size() const {
  return shield_status_list_.size();
}
inline int IMGroupGetShieldRsp::shield_status_list_size() const {
  return _internal_shield_status_list_size();
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::mutable_shield_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
IMGroupGetShieldRsp::mutable_shield_status_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return &shield_status_list_;
}
inline const ::IM::BaseDefine::ShieldStatus& IMGroupGetShieldRsp::_internal_shield_status_list(int index) const {
  return shield_status_list_.Get(index);
}
inline const ::IM::BaseDefine::ShieldStatus& IMGroupGetShieldRsp::shield_status_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return _internal_shield_status_list(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::_internal_add_shield_status_list() {
  return shield_status_list_.Add();
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::add_shield_status_list() {
  ::IM::BaseDefine::ShieldStatus* _add = _internal_add_shield_status_list();
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
IMGroupGetShieldRsp::shield_status_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_;
}

// bytes attach_data = 20;
inline void IMGroupGetShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGroupGetShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGroupGetShieldRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline std::string* IMGroupGetShieldRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.attach_data)
  return _s;
}
inline const std::string& IMGroupGetShieldRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGroupGetShieldRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGroupGetShieldRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGroupGetShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGroupGetShieldRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGroupGetShieldRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferReq

// uint32 from_user_id = 1;
inline void IMFileTransferReq::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.from_user_id)
  return _internal_from_user_id();
}
inline void IMFileTransferReq::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_user_id_ = value;
}
inline void IMFileTransferReq::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.from_user_id)
}

// uint32 to_user_id = 2;
inline void IMFileTransferReq::clear_to_user_id() {
  to_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::_internal_to_user_id() const {
  return to_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.to_user_id)
  return _internal_to_user_id();
}
inline void IMFileTransferReq::_internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_user_id_ = value;
}
inline void IMFileTransferReq::set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.to_user_id)
}

// string file_name = 3;
inline void IMFileTransferReq::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& IMFileTransferReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMFileTransferReq::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_name)
}
inline std::string* IMFileTransferReq::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.file_name)
  return _s;
}
inline const std::string& IMFileTransferReq::_internal_file_name() const {
  return file_name_.Get();
}
inline void IMFileTransferReq::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMFileTransferReq::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMFileTransferReq::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferReq.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMFileTransferReq::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.file_name)
}

// uint32 file_size = 4;
inline void IMFileTransferReq::clear_file_size() {
  file_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_size)
  return _internal_file_size();
}
inline void IMFileTransferReq::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_size_ = value;
}
inline void IMFileTransferReq::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_size)
}

// .IM.BaseDefine.TransferFileType trans_mode = 5;
inline void IMFileTransferReq::clear_trans_mode() {
  trans_mode_ = 0;
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferReq::_internal_trans_mode() const {
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.trans_mode)
  return _internal_trans_mode();
}
inline void IMFileTransferReq::_internal_set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  
  trans_mode_ = value;
}
inline void IMFileTransferReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.trans_mode)
}

// bytes attach_data = 20;
inline void IMFileTransferReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMFileTransferReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMFileTransferReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.attach_data)
}
inline std::string* IMFileTransferReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.attach_data)
  return _s;
}
inline const std::string& IMFileTransferReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFileTransferReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMFileTransferReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMFileTransferReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMFileTransferReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferRsp

// uint32 result_code = 1;
inline void IMFileTransferRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.result_code)
  return _internal_result_code();
}
inline void IMFileTransferRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMFileTransferRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.result_code)
}

// uint32 from_user_id = 2;
inline void IMFileTransferRsp::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.from_user_id)
  return _internal_from_user_id();
}
inline void IMFileTransferRsp::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_user_id_ = value;
}
inline void IMFileTransferRsp::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.from_user_id)
}

// uint32 to_user_id = 3;
inline void IMFileTransferRsp::clear_to_user_id() {
  to_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::_internal_to_user_id() const {
  return to_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.to_user_id)
  return _internal_to_user_id();
}
inline void IMFileTransferRsp::_internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_user_id_ = value;
}
inline void IMFileTransferRsp::set_to_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.to_user_id)
}

// string file_name = 4;
inline void IMFileTransferRsp::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& IMFileTransferRsp::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMFileTransferRsp::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_name)
}
inline std::string* IMFileTransferRsp::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.file_name)
  return _s;
}
inline const std::string& IMFileTransferRsp::_internal_file_name() const {
  return file_name_.Get();
}
inline void IMFileTransferRsp::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMFileTransferRsp::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.file_name)
}

// uint32 file_size = 5;
inline void IMFileTransferRsp::clear_file_size() {
  file_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFileTransferRsp::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_size)
  return _internal_file_size();
}
inline void IMFileTransferRsp::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_size_ = value;
}
inline void IMFileTransferRsp::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_size)
}

// string task_id = 6;
inline void IMFileTransferRsp::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& IMFileTransferRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMFileTransferRsp::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.task_id)
}
inline std::string* IMFileTransferRsp::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.task_id)
  return _s;
}
inline const std::string& IMFileTransferRsp::_internal_task_id() const {
  return task_id_.Get();
}
inline void IMFileTransferRsp::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMFileTransferRsp::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.task_id)
}

// .IM.BaseDefine.TransferFileType trans_mode = 7;
inline void IMFileTransferRsp::clear_trans_mode() {
  trans_mode_ = 0;
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferRsp::_internal_trans_mode() const {
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.trans_mode)
  return _internal_trans_mode();
}
inline void IMFileTransferRsp::_internal_set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  
  trans_mode_ = value;
}
inline void IMFileTransferRsp::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.trans_mode)
}

// bytes attach_data = 20;
inline void IMFileTransferRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMFileTransferRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMFileTransferRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.attach_data)
}
inline std::string* IMFileTransferRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.attach_data)
  return _s;
}
inline const std::string& IMFileTransferRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFileTransferRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMFileTransferRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMFileTransferRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileServerIPReq

// -------------------------------------------------------------------

// IMFileServerIPRsp

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
inline int IMFileServerIPRsp::_internal_ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline int IMFileServerIPRsp::ip_addr_list_size() const {
  return _internal_ip_addr_list_size();
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileServerIPRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return &ip_addr_list_;
}
inline const ::IM::BaseDefine::IpAddr& IMFileServerIPRsp::_internal_ip_addr_list(int index) const {
  return ip_addr_list_.Get(index);
}
inline const ::IM::BaseDefine::IpAddr& IMFileServerIPRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return _internal_ip_addr_list(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::_internal_add_ip_addr_list() {
  return ip_addr_list_.Add();
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::add_ip_addr_list() {
  ::IM::BaseDefine::IpAddr* _add = _internal_add_ip_addr_list();
  // @@protoc_insertion_point(field_add:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileServerIPRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eServer_2eproto
