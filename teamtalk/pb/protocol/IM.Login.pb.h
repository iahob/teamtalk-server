// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eLogin_2eproto;
namespace IM {
namespace Login {
class IMDeviceTokenReq;
struct IMDeviceTokenReqDefaultTypeInternal;
extern IMDeviceTokenReqDefaultTypeInternal _IMDeviceTokenReq_default_instance_;
class IMDeviceTokenRsp;
struct IMDeviceTokenRspDefaultTypeInternal;
extern IMDeviceTokenRspDefaultTypeInternal _IMDeviceTokenRsp_default_instance_;
class IMKickPCClientReq;
struct IMKickPCClientReqDefaultTypeInternal;
extern IMKickPCClientReqDefaultTypeInternal _IMKickPCClientReq_default_instance_;
class IMKickPCClientRsp;
struct IMKickPCClientRspDefaultTypeInternal;
extern IMKickPCClientRspDefaultTypeInternal _IMKickPCClientRsp_default_instance_;
class IMKickUser;
struct IMKickUserDefaultTypeInternal;
extern IMKickUserDefaultTypeInternal _IMKickUser_default_instance_;
class IMLoginReq;
struct IMLoginReqDefaultTypeInternal;
extern IMLoginReqDefaultTypeInternal _IMLoginReq_default_instance_;
class IMLoginRes;
struct IMLoginResDefaultTypeInternal;
extern IMLoginResDefaultTypeInternal _IMLoginRes_default_instance_;
class IMLogoutReq;
struct IMLogoutReqDefaultTypeInternal;
extern IMLogoutReqDefaultTypeInternal _IMLogoutReq_default_instance_;
class IMLogoutRsp;
struct IMLogoutRspDefaultTypeInternal;
extern IMLogoutRspDefaultTypeInternal _IMLogoutRsp_default_instance_;
class IMMsgServReq;
struct IMMsgServReqDefaultTypeInternal;
extern IMMsgServReqDefaultTypeInternal _IMMsgServReq_default_instance_;
class IMMsgServRsp;
struct IMMsgServRspDefaultTypeInternal;
extern IMMsgServRspDefaultTypeInternal _IMMsgServRsp_default_instance_;
class IMPushShieldReq;
struct IMPushShieldReqDefaultTypeInternal;
extern IMPushShieldReqDefaultTypeInternal _IMPushShieldReq_default_instance_;
class IMPushShieldRsp;
struct IMPushShieldRspDefaultTypeInternal;
extern IMPushShieldRspDefaultTypeInternal _IMPushShieldRsp_default_instance_;
class IMQueryPushShieldReq;
struct IMQueryPushShieldReqDefaultTypeInternal;
extern IMQueryPushShieldReqDefaultTypeInternal _IMQueryPushShieldReq_default_instance_;
class IMQueryPushShieldRsp;
struct IMQueryPushShieldRspDefaultTypeInternal;
extern IMQueryPushShieldRspDefaultTypeInternal _IMQueryPushShieldRsp_default_instance_;
}  // namespace Login
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Login::IMDeviceTokenReq* Arena::CreateMaybeMessage<::IM::Login::IMDeviceTokenReq>(Arena*);
template<> ::IM::Login::IMDeviceTokenRsp* Arena::CreateMaybeMessage<::IM::Login::IMDeviceTokenRsp>(Arena*);
template<> ::IM::Login::IMKickPCClientReq* Arena::CreateMaybeMessage<::IM::Login::IMKickPCClientReq>(Arena*);
template<> ::IM::Login::IMKickPCClientRsp* Arena::CreateMaybeMessage<::IM::Login::IMKickPCClientRsp>(Arena*);
template<> ::IM::Login::IMKickUser* Arena::CreateMaybeMessage<::IM::Login::IMKickUser>(Arena*);
template<> ::IM::Login::IMLoginReq* Arena::CreateMaybeMessage<::IM::Login::IMLoginReq>(Arena*);
template<> ::IM::Login::IMLoginRes* Arena::CreateMaybeMessage<::IM::Login::IMLoginRes>(Arena*);
template<> ::IM::Login::IMLogoutReq* Arena::CreateMaybeMessage<::IM::Login::IMLogoutReq>(Arena*);
template<> ::IM::Login::IMLogoutRsp* Arena::CreateMaybeMessage<::IM::Login::IMLogoutRsp>(Arena*);
template<> ::IM::Login::IMMsgServReq* Arena::CreateMaybeMessage<::IM::Login::IMMsgServReq>(Arena*);
template<> ::IM::Login::IMMsgServRsp* Arena::CreateMaybeMessage<::IM::Login::IMMsgServRsp>(Arena*);
template<> ::IM::Login::IMPushShieldReq* Arena::CreateMaybeMessage<::IM::Login::IMPushShieldReq>(Arena*);
template<> ::IM::Login::IMPushShieldRsp* Arena::CreateMaybeMessage<::IM::Login::IMPushShieldRsp>(Arena*);
template<> ::IM::Login::IMQueryPushShieldReq* Arena::CreateMaybeMessage<::IM::Login::IMQueryPushShieldReq>(Arena*);
template<> ::IM::Login::IMQueryPushShieldRsp* Arena::CreateMaybeMessage<::IM::Login::IMQueryPushShieldRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Login {

// ===================================================================

class IMMsgServReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:IM.Login.IMMsgServReq) */ {
 public:
  inline IMMsgServReq() : IMMsgServReq(nullptr) {}
  explicit constexpr IMMsgServReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgServReq(const IMMsgServReq& from);
  IMMsgServReq(IMMsgServReq&& from) noexcept
    : IMMsgServReq() {
    *this = ::std::move(from);
  }

  inline IMMsgServReq& operator=(const IMMsgServReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgServReq& operator=(IMMsgServReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgServReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgServReq* internal_default_instance() {
    return reinterpret_cast<const IMMsgServReq*>(
               &_IMMsgServReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMMsgServReq& a, IMMsgServReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgServReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgServReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServReq* New() const final {
    return new IMMsgServReq();
  }

  IMMsgServReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IMMsgServReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IMMsgServReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMMsgServReq";
  }
  protected:
  explicit IMMsgServReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMMsgServRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMMsgServRsp) */ {
 public:
  inline IMMsgServRsp() : IMMsgServRsp(nullptr) {}
  ~IMMsgServRsp() override;
  explicit constexpr IMMsgServRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgServRsp(const IMMsgServRsp& from);
  IMMsgServRsp(IMMsgServRsp&& from) noexcept
    : IMMsgServRsp() {
    *this = ::std::move(from);
  }

  inline IMMsgServRsp& operator=(const IMMsgServRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgServRsp& operator=(IMMsgServRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgServRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgServRsp* internal_default_instance() {
    return reinterpret_cast<const IMMsgServRsp*>(
               &_IMMsgServRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMMsgServRsp& a, IMMsgServRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgServRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgServRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServRsp* New() const final {
    return new IMMsgServRsp();
  }

  IMMsgServRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgServRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgServRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgServRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMMsgServRsp";
  }
  protected:
  explicit IMMsgServRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorIpFieldNumber = 2,
    kBackipIpFieldNumber = 3,
    kResultCodeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string prior_ip = 2;
  void clear_prior_ip();
  const std::string& prior_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prior_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prior_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_prior_ip();
  void set_allocated_prior_ip(std::string* prior_ip);
  private:
  const std::string& _internal_prior_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prior_ip(const std::string& value);
  std::string* _internal_mutable_prior_ip();
  public:

  // string backip_ip = 3;
  void clear_backip_ip();
  const std::string& backip_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backip_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backip_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_backip_ip();
  void set_allocated_backip_ip(std::string* backip_ip);
  private:
  const std::string& _internal_backip_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backip_ip(const std::string& value);
  std::string* _internal_mutable_backip_ip();
  public:

  // .IM.BaseDefine.ResultType result_code = 1;
  void clear_result_code();
  ::IM::BaseDefine::ResultType result_code() const;
  void set_result_code(::IM::BaseDefine::ResultType value);
  private:
  ::IM::BaseDefine::ResultType _internal_result_code() const;
  void _internal_set_result_code(::IM::BaseDefine::ResultType value);
  public:

  // uint32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prior_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backip_ip_;
  int result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMLoginReq) */ {
 public:
  inline IMLoginReq() : IMLoginReq(nullptr) {}
  ~IMLoginReq() override;
  explicit constexpr IMLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMLoginReq(const IMLoginReq& from);
  IMLoginReq(IMLoginReq&& from) noexcept
    : IMLoginReq() {
    *this = ::std::move(from);
  }

  inline IMLoginReq& operator=(const IMLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMLoginReq& operator=(IMLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMLoginReq* internal_default_instance() {
    return reinterpret_cast<const IMLoginReq*>(
               &_IMLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMLoginReq& a, IMLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMLoginReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMLoginReq* New() const final {
    return new IMLoginReq();
  }

  IMLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMLoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMLoginReq";
  }
  protected:
  explicit IMLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kClientVersionFieldNumber = 5,
    kOnlineStatusFieldNumber = 3,
    kClientTypeFieldNumber = 4,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string client_version = 5;
  void clear_client_version();
  const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // .IM.BaseDefine.UserStatType online_status = 3;
  void clear_online_status();
  ::IM::BaseDefine::UserStatType online_status() const;
  void set_online_status(::IM::BaseDefine::UserStatType value);
  private:
  ::IM::BaseDefine::UserStatType _internal_online_status() const;
  void _internal_set_online_status(::IM::BaseDefine::UserStatType value);
  public:

  // .IM.BaseDefine.ClientType client_type = 4;
  void clear_client_type();
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_client_type() const;
  void _internal_set_client_type(::IM::BaseDefine::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
  int online_status_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMLoginRes) */ {
 public:
  inline IMLoginRes() : IMLoginRes(nullptr) {}
  ~IMLoginRes() override;
  explicit constexpr IMLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMLoginRes(const IMLoginRes& from);
  IMLoginRes(IMLoginRes&& from) noexcept
    : IMLoginRes() {
    *this = ::std::move(from);
  }

  inline IMLoginRes& operator=(const IMLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMLoginRes& operator=(IMLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMLoginRes* internal_default_instance() {
    return reinterpret_cast<const IMLoginRes*>(
               &_IMLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMLoginRes& a, IMLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(IMLoginRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMLoginRes* New() const final {
    return new IMLoginRes();
  }

  IMLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMLoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMLoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMLoginRes";
  }
  protected:
  explicit IMLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultStringFieldNumber = 3,
    kUserInfoFieldNumber = 5,
    kServerTimeFieldNumber = 1,
    kResultCodeFieldNumber = 2,
    kOnlineStatusFieldNumber = 4,
  };
  // string result_string = 3;
  void clear_result_string();
  const std::string& result_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // .IM.BaseDefine.UserInfo user_info = 5;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::IM::BaseDefine::UserInfo& user_info() const;
  PROTOBUF_MUST_USE_RESULT ::IM::BaseDefine::UserInfo* release_user_info();
  ::IM::BaseDefine::UserInfo* mutable_user_info();
  void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::IM::BaseDefine::UserInfo* user_info);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_user_info();

  // uint32 server_time = 1;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.ResultType result_code = 2;
  void clear_result_code();
  ::IM::BaseDefine::ResultType result_code() const;
  void set_result_code(::IM::BaseDefine::ResultType value);
  private:
  ::IM::BaseDefine::ResultType _internal_result_code() const;
  void _internal_set_result_code(::IM::BaseDefine::ResultType value);
  public:

  // .IM.BaseDefine.UserStatType online_status = 4;
  void clear_online_status();
  ::IM::BaseDefine::UserStatType online_status() const;
  void set_online_status(::IM::BaseDefine::UserStatType value);
  private:
  ::IM::BaseDefine::UserStatType _internal_online_status() const;
  void _internal_set_online_status(::IM::BaseDefine::UserStatType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time_;
  int result_code_;
  int online_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMLogoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:IM.Login.IMLogoutReq) */ {
 public:
  inline IMLogoutReq() : IMLogoutReq(nullptr) {}
  explicit constexpr IMLogoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMLogoutReq(const IMLogoutReq& from);
  IMLogoutReq(IMLogoutReq&& from) noexcept
    : IMLogoutReq() {
    *this = ::std::move(from);
  }

  inline IMLogoutReq& operator=(const IMLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMLogoutReq& operator=(IMLogoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMLogoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMLogoutReq* internal_default_instance() {
    return reinterpret_cast<const IMLogoutReq*>(
               &_IMLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMLogoutReq& a, IMLogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMLogoutReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMLogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMLogoutReq* New() const final {
    return new IMLogoutReq();
  }

  IMLogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMLogoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IMLogoutReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IMLogoutReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMLogoutReq";
  }
  protected:
  explicit IMLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMLogoutRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMLogoutRsp) */ {
 public:
  inline IMLogoutRsp() : IMLogoutRsp(nullptr) {}
  ~IMLogoutRsp() override;
  explicit constexpr IMLogoutRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMLogoutRsp(const IMLogoutRsp& from);
  IMLogoutRsp(IMLogoutRsp&& from) noexcept
    : IMLogoutRsp() {
    *this = ::std::move(from);
  }

  inline IMLogoutRsp& operator=(const IMLogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMLogoutRsp& operator=(IMLogoutRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMLogoutRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMLogoutRsp* internal_default_instance() {
    return reinterpret_cast<const IMLogoutRsp*>(
               &_IMLogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMLogoutRsp& a, IMLogoutRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMLogoutRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMLogoutRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMLogoutRsp* New() const final {
    return new IMLogoutRsp();
  }

  IMLogoutRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMLogoutRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMLogoutRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMLogoutRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMLogoutRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMLogoutRsp";
  }
  protected:
  explicit IMLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
  };
  // uint32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMKickUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMKickUser) */ {
 public:
  inline IMKickUser() : IMKickUser(nullptr) {}
  ~IMKickUser() override;
  explicit constexpr IMKickUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMKickUser(const IMKickUser& from);
  IMKickUser(IMKickUser&& from) noexcept
    : IMKickUser() {
    *this = ::std::move(from);
  }

  inline IMKickUser& operator=(const IMKickUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMKickUser& operator=(IMKickUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMKickUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMKickUser* internal_default_instance() {
    return reinterpret_cast<const IMKickUser*>(
               &_IMKickUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMKickUser& a, IMKickUser& b) {
    a.Swap(&b);
  }
  inline void Swap(IMKickUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMKickUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMKickUser* New() const final {
    return new IMKickUser();
  }

  IMKickUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMKickUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMKickUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMKickUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMKickUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMKickUser";
  }
  protected:
  explicit IMKickUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kKickReasonFieldNumber = 2,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  void clear_kick_reason();
  ::IM::BaseDefine::KickReasonType kick_reason() const;
  void set_kick_reason(::IM::BaseDefine::KickReasonType value);
  private:
  ::IM::BaseDefine::KickReasonType _internal_kick_reason() const;
  void _internal_set_kick_reason(::IM::BaseDefine::KickReasonType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int kick_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMDeviceTokenReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMDeviceTokenReq) */ {
 public:
  inline IMDeviceTokenReq() : IMDeviceTokenReq(nullptr) {}
  ~IMDeviceTokenReq() override;
  explicit constexpr IMDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMDeviceTokenReq(const IMDeviceTokenReq& from);
  IMDeviceTokenReq(IMDeviceTokenReq&& from) noexcept
    : IMDeviceTokenReq() {
    *this = ::std::move(from);
  }

  inline IMDeviceTokenReq& operator=(const IMDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDeviceTokenReq& operator=(IMDeviceTokenReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMDeviceTokenReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMDeviceTokenReq* internal_default_instance() {
    return reinterpret_cast<const IMDeviceTokenReq*>(
               &_IMDeviceTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMDeviceTokenReq& a, IMDeviceTokenReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDeviceTokenReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDeviceTokenReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDeviceTokenReq* New() const final {
    return new IMDeviceTokenReq();
  }

  IMDeviceTokenReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDeviceTokenReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMDeviceTokenReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMDeviceTokenReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMDeviceTokenReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMDeviceTokenReq";
  }
  protected:
  explicit IMDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTokenFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kClientTypeFieldNumber = 3,
  };
  // string device_token = 2;
  void clear_device_token();
  const std::string& device_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_token();
  void set_allocated_device_token(std::string* device_token);
  private:
  const std::string& _internal_device_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_token(const std::string& value);
  std::string* _internal_mutable_device_token();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.ClientType client_type = 3;
  void clear_client_type();
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_client_type() const;
  void _internal_set_client_type(::IM::BaseDefine::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMDeviceTokenRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMDeviceTokenRsp) */ {
 public:
  inline IMDeviceTokenRsp() : IMDeviceTokenRsp(nullptr) {}
  ~IMDeviceTokenRsp() override;
  explicit constexpr IMDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMDeviceTokenRsp(const IMDeviceTokenRsp& from);
  IMDeviceTokenRsp(IMDeviceTokenRsp&& from) noexcept
    : IMDeviceTokenRsp() {
    *this = ::std::move(from);
  }

  inline IMDeviceTokenRsp& operator=(const IMDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDeviceTokenRsp& operator=(IMDeviceTokenRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMDeviceTokenRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMDeviceTokenRsp* internal_default_instance() {
    return reinterpret_cast<const IMDeviceTokenRsp*>(
               &_IMDeviceTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMDeviceTokenRsp& a, IMDeviceTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDeviceTokenRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDeviceTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDeviceTokenRsp* New() const final {
    return new IMDeviceTokenRsp();
  }

  IMDeviceTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDeviceTokenRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMDeviceTokenRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMDeviceTokenRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMDeviceTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMDeviceTokenRsp";
  }
  protected:
  explicit IMDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMKickPCClientReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMKickPCClientReq) */ {
 public:
  inline IMKickPCClientReq() : IMKickPCClientReq(nullptr) {}
  ~IMKickPCClientReq() override;
  explicit constexpr IMKickPCClientReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMKickPCClientReq(const IMKickPCClientReq& from);
  IMKickPCClientReq(IMKickPCClientReq&& from) noexcept
    : IMKickPCClientReq() {
    *this = ::std::move(from);
  }

  inline IMKickPCClientReq& operator=(const IMKickPCClientReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMKickPCClientReq& operator=(IMKickPCClientReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMKickPCClientReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMKickPCClientReq* internal_default_instance() {
    return reinterpret_cast<const IMKickPCClientReq*>(
               &_IMKickPCClientReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMKickPCClientReq& a, IMKickPCClientReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMKickPCClientReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMKickPCClientReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMKickPCClientReq* New() const final {
    return new IMKickPCClientReq();
  }

  IMKickPCClientReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMKickPCClientReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMKickPCClientReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMKickPCClientReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMKickPCClientReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMKickPCClientReq";
  }
  protected:
  explicit IMKickPCClientReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickPCClientReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMKickPCClientRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMKickPCClientRsp) */ {
 public:
  inline IMKickPCClientRsp() : IMKickPCClientRsp(nullptr) {}
  ~IMKickPCClientRsp() override;
  explicit constexpr IMKickPCClientRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMKickPCClientRsp(const IMKickPCClientRsp& from);
  IMKickPCClientRsp(IMKickPCClientRsp&& from) noexcept
    : IMKickPCClientRsp() {
    *this = ::std::move(from);
  }

  inline IMKickPCClientRsp& operator=(const IMKickPCClientRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMKickPCClientRsp& operator=(IMKickPCClientRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMKickPCClientRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMKickPCClientRsp* internal_default_instance() {
    return reinterpret_cast<const IMKickPCClientRsp*>(
               &_IMKickPCClientRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMKickPCClientRsp& a, IMKickPCClientRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMKickPCClientRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMKickPCClientRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMKickPCClientRsp* New() const final {
    return new IMKickPCClientRsp();
  }

  IMKickPCClientRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMKickPCClientRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMKickPCClientRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMKickPCClientRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMKickPCClientRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMKickPCClientRsp";
  }
  protected:
  explicit IMKickPCClientRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickPCClientRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMPushShieldReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMPushShieldReq) */ {
 public:
  inline IMPushShieldReq() : IMPushShieldReq(nullptr) {}
  ~IMPushShieldReq() override;
  explicit constexpr IMPushShieldReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMPushShieldReq(const IMPushShieldReq& from);
  IMPushShieldReq(IMPushShieldReq&& from) noexcept
    : IMPushShieldReq() {
    *this = ::std::move(from);
  }

  inline IMPushShieldReq& operator=(const IMPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMPushShieldReq& operator=(IMPushShieldReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMPushShieldReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMPushShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMPushShieldReq*>(
               &_IMPushShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IMPushShieldReq& a, IMPushShieldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMPushShieldReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMPushShieldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMPushShieldReq* New() const final {
    return new IMPushShieldReq();
  }

  IMPushShieldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMPushShieldReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMPushShieldReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMPushShieldReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMPushShieldReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMPushShieldReq";
  }
  protected:
  explicit IMPushShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kShieldStatusFieldNumber = 2,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shield_status = 2;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMPushShieldRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMPushShieldRsp) */ {
 public:
  inline IMPushShieldRsp() : IMPushShieldRsp(nullptr) {}
  ~IMPushShieldRsp() override;
  explicit constexpr IMPushShieldRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMPushShieldRsp(const IMPushShieldRsp& from);
  IMPushShieldRsp(IMPushShieldRsp&& from) noexcept
    : IMPushShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMPushShieldRsp& operator=(const IMPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMPushShieldRsp& operator=(IMPushShieldRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMPushShieldRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMPushShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMPushShieldRsp*>(
               &_IMPushShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IMPushShieldRsp& a, IMPushShieldRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMPushShieldRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMPushShieldRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMPushShieldRsp* New() const final {
    return new IMPushShieldRsp();
  }

  IMPushShieldRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMPushShieldRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMPushShieldRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMPushShieldRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMPushShieldRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMPushShieldRsp";
  }
  protected:
  explicit IMPushShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
    kShieldStatusFieldNumber = 3,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shield_status = 3;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMQueryPushShieldReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMQueryPushShieldReq) */ {
 public:
  inline IMQueryPushShieldReq() : IMQueryPushShieldReq(nullptr) {}
  ~IMQueryPushShieldReq() override;
  explicit constexpr IMQueryPushShieldReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMQueryPushShieldReq(const IMQueryPushShieldReq& from);
  IMQueryPushShieldReq(IMQueryPushShieldReq&& from) noexcept
    : IMQueryPushShieldReq() {
    *this = ::std::move(from);
  }

  inline IMQueryPushShieldReq& operator=(const IMQueryPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMQueryPushShieldReq& operator=(IMQueryPushShieldReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMQueryPushShieldReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMQueryPushShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMQueryPushShieldReq*>(
               &_IMQueryPushShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IMQueryPushShieldReq& a, IMQueryPushShieldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMQueryPushShieldReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMQueryPushShieldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMQueryPushShieldReq* New() const final {
    return new IMQueryPushShieldReq();
  }

  IMQueryPushShieldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMQueryPushShieldReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMQueryPushShieldReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMQueryPushShieldReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMQueryPushShieldReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMQueryPushShieldReq";
  }
  protected:
  explicit IMQueryPushShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class IMQueryPushShieldRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login.IMQueryPushShieldRsp) */ {
 public:
  inline IMQueryPushShieldRsp() : IMQueryPushShieldRsp(nullptr) {}
  ~IMQueryPushShieldRsp() override;
  explicit constexpr IMQueryPushShieldRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from);
  IMQueryPushShieldRsp(IMQueryPushShieldRsp&& from) noexcept
    : IMQueryPushShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMQueryPushShieldRsp& operator=(const IMQueryPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMQueryPushShieldRsp& operator=(IMQueryPushShieldRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMQueryPushShieldRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMQueryPushShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMQueryPushShieldRsp*>(
               &_IMQueryPushShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IMQueryPushShieldRsp& a, IMQueryPushShieldRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMQueryPushShieldRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMQueryPushShieldRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMQueryPushShieldRsp* New() const final {
    return new IMQueryPushShieldRsp();
  }

  IMQueryPushShieldRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMQueryPushShieldRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMQueryPushShieldRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMQueryPushShieldRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMQueryPushShieldRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.IMQueryPushShieldRsp";
  }
  protected:
  explicit IMQueryPushShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
    kShieldStatusFieldNumber = 3,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shield_status = 3;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMMsgServReq

// -------------------------------------------------------------------

// IMMsgServRsp

// .IM.BaseDefine.ResultType result_code = 1;
inline void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
}
inline ::IM::BaseDefine::ResultType IMMsgServRsp::_internal_result_code() const {
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline ::IM::BaseDefine::ResultType IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.result_code)
  return _internal_result_code();
}
inline void IMMsgServRsp::_internal_set_result_code(::IM::BaseDefine::ResultType value) {
  
  result_code_ = value;
}
inline void IMMsgServRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.result_code)
}

// string prior_ip = 2;
inline void IMMsgServRsp::clear_prior_ip() {
  prior_ip_.ClearToEmpty();
}
inline const std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.prior_ip)
  return _internal_prior_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgServRsp::set_prior_ip(ArgT0&& arg0, ArgT... args) {
 
 prior_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.prior_ip)
}
inline std::string* IMMsgServRsp::mutable_prior_ip() {
  std::string* _s = _internal_mutable_prior_ip();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.prior_ip)
  return _s;
}
inline const std::string& IMMsgServRsp::_internal_prior_ip() const {
  return prior_ip_.Get();
}
inline void IMMsgServRsp::_internal_set_prior_ip(const std::string& value) {
  
  prior_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgServRsp::_internal_mutable_prior_ip() {
  
  return prior_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgServRsp::release_prior_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.prior_ip)
  return prior_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgServRsp::set_allocated_prior_ip(std::string* prior_ip) {
  if (prior_ip != nullptr) {
    
  } else {
    
  }
  prior_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prior_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.prior_ip)
}

// string backip_ip = 3;
inline void IMMsgServRsp::clear_backip_ip() {
  backip_ip_.ClearToEmpty();
}
inline const std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.backip_ip)
  return _internal_backip_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgServRsp::set_backip_ip(ArgT0&& arg0, ArgT... args) {
 
 backip_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.backip_ip)
}
inline std::string* IMMsgServRsp::mutable_backip_ip() {
  std::string* _s = _internal_mutable_backip_ip();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.backip_ip)
  return _s;
}
inline const std::string& IMMsgServRsp::_internal_backip_ip() const {
  return backip_ip_.Get();
}
inline void IMMsgServRsp::_internal_set_backip_ip(const std::string& value) {
  
  backip_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgServRsp::_internal_mutable_backip_ip() {
  
  return backip_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgServRsp::release_backip_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.backip_ip)
  return backip_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgServRsp::set_allocated_backip_ip(std::string* backip_ip) {
  if (backip_ip != nullptr) {
    
  } else {
    
  }
  backip_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backip_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.backip_ip)
}

// uint32 port = 4;
inline void IMMsgServRsp::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServRsp::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.port)
  return _internal_port();
}
inline void IMMsgServRsp::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void IMMsgServRsp::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.port)
}

// -------------------------------------------------------------------

// IMLoginReq

// string user_name = 1;
inline void IMLoginReq::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& IMLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMLoginReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.user_name)
}
inline std::string* IMLoginReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.user_name)
  return _s;
}
inline const std::string& IMLoginReq::_internal_user_name() const {
  return user_name_.Get();
}
inline void IMLoginReq::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMLoginReq::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMLoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMLoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.user_name)
}

// string password = 2;
inline void IMLoginReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMLoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.password)
}
inline std::string* IMLoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.password)
  return _s;
}
inline const std::string& IMLoginReq::_internal_password() const {
  return password_.Get();
}
inline void IMLoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMLoginReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.password)
}

// .IM.BaseDefine.UserStatType online_status = 3;
inline void IMLoginReq::clear_online_status() {
  online_status_ = 0;
}
inline ::IM::BaseDefine::UserStatType IMLoginReq::_internal_online_status() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline ::IM::BaseDefine::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.online_status)
  return _internal_online_status();
}
inline void IMLoginReq::_internal_set_online_status(::IM::BaseDefine::UserStatType value) {
  
  online_status_ = value;
}
inline void IMLoginReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  _internal_set_online_status(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.online_status)
}

// .IM.BaseDefine.ClientType client_type = 4;
inline void IMLoginReq::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMLoginReq::_internal_client_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline ::IM::BaseDefine::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_type)
  return _internal_client_type();
}
inline void IMLoginReq::_internal_set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
}
inline void IMLoginReq::set_client_type(::IM::BaseDefine::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_type)
}

// string client_version = 5;
inline void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmpty();
}
inline const std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMLoginReq::set_client_version(ArgT0&& arg0, ArgT... args) {
 
 client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_version)
}
inline std::string* IMLoginReq::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.client_version)
  return _s;
}
inline const std::string& IMLoginReq::_internal_client_version() const {
  return client_version_.Get();
}
inline void IMLoginReq::_internal_set_client_version(const std::string& value) {
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMLoginReq::_internal_mutable_client_version() {
  
  return client_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.client_version)
  return client_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMLoginReq::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    
  } else {
    
  }
  client_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.client_version)
}

// -------------------------------------------------------------------

// IMLoginRes

// uint32 server_time = 1;
inline void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMLoginRes::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.server_time)
  return _internal_server_time();
}
inline void IMLoginRes::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_time_ = value;
}
inline void IMLoginRes::set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.server_time)
}

// .IM.BaseDefine.ResultType result_code = 2;
inline void IMLoginRes::clear_result_code() {
  result_code_ = 0;
}
inline ::IM::BaseDefine::ResultType IMLoginRes::_internal_result_code() const {
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline ::IM::BaseDefine::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_code)
  return _internal_result_code();
}
inline void IMLoginRes::_internal_set_result_code(::IM::BaseDefine::ResultType value) {
  
  result_code_ = value;
}
inline void IMLoginRes::set_result_code(::IM::BaseDefine::ResultType value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_code)
}

// string result_string = 3;
inline void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmpty();
}
inline const std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_string)
  return _internal_result_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMLoginRes::set_result_string(ArgT0&& arg0, ArgT... args) {
 
 result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_string)
}
inline std::string* IMLoginRes::mutable_result_string() {
  std::string* _s = _internal_mutable_result_string();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.result_string)
  return _s;
}
inline const std::string& IMLoginRes::_internal_result_string() const {
  return result_string_.Get();
}
inline void IMLoginRes::_internal_set_result_string(const std::string& value) {
  
  result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMLoginRes::_internal_mutable_result_string() {
  
  return result_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMLoginRes::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.result_string)
}

// .IM.BaseDefine.UserStatType online_status = 4;
inline void IMLoginRes::clear_online_status() {
  online_status_ = 0;
}
inline ::IM::BaseDefine::UserStatType IMLoginRes::_internal_online_status() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline ::IM::BaseDefine::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.online_status)
  return _internal_online_status();
}
inline void IMLoginRes::_internal_set_online_status(::IM::BaseDefine::UserStatType value) {
  
  online_status_ = value;
}
inline void IMLoginRes::set_online_status(::IM::BaseDefine::UserStatType value) {
  _internal_set_online_status(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.online_status)
}

// .IM.BaseDefine.UserInfo user_info = 5;
inline bool IMLoginRes::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool IMLoginRes::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMLoginRes::_internal_user_info() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::BaseDefine::UserInfo&>(
      ::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.user_info)
  return _internal_user_info();
}
inline void IMLoginRes::unsafe_arena_set_allocated_user_info(
    ::IM::BaseDefine::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Login.IMLoginRes.user_info)
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::release_user_info() {
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.user_info)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArenaForAllocation());
    user_info_ = p;
  }
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::mutable_user_info() {
  ::IM::BaseDefine::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.user_info)
  return _msg;
}
inline void IMLoginRes::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.user_info)
}

// -------------------------------------------------------------------

// IMLogoutReq

// -------------------------------------------------------------------

// IMLogoutRsp

// uint32 result_code = 1;
inline void IMLogoutRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMLogoutRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMLogoutRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutRsp.result_code)
  return _internal_result_code();
}
inline void IMLogoutRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMLogoutRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutRsp.result_code)
}

// -------------------------------------------------------------------

// IMKickUser

// uint32 user_id = 1;
inline void IMKickUser::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickUser::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.user_id)
  return _internal_user_id();
}
inline void IMKickUser::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMKickUser::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.user_id)
}

// .IM.BaseDefine.KickReasonType kick_reason = 2;
inline void IMKickUser::clear_kick_reason() {
  kick_reason_ = 0;
}
inline ::IM::BaseDefine::KickReasonType IMKickUser::_internal_kick_reason() const {
  return static_cast< ::IM::BaseDefine::KickReasonType >(kick_reason_);
}
inline ::IM::BaseDefine::KickReasonType IMKickUser::kick_reason() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.kick_reason)
  return _internal_kick_reason();
}
inline void IMKickUser::_internal_set_kick_reason(::IM::BaseDefine::KickReasonType value) {
  
  kick_reason_ = value;
}
inline void IMKickUser::set_kick_reason(::IM::BaseDefine::KickReasonType value) {
  _internal_set_kick_reason(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.kick_reason)
}

// -------------------------------------------------------------------

// IMDeviceTokenReq

// uint32 user_id = 1;
inline void IMDeviceTokenReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDeviceTokenReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.user_id)
  return _internal_user_id();
}
inline void IMDeviceTokenReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMDeviceTokenReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.user_id)
}

// string device_token = 2;
inline void IMDeviceTokenReq::clear_device_token() {
  device_token_.ClearToEmpty();
}
inline const std::string& IMDeviceTokenReq::device_token() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.device_token)
  return _internal_device_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMDeviceTokenReq::set_device_token(ArgT0&& arg0, ArgT... args) {
 
 device_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.device_token)
}
inline std::string* IMDeviceTokenReq::mutable_device_token() {
  std::string* _s = _internal_mutable_device_token();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.device_token)
  return _s;
}
inline const std::string& IMDeviceTokenReq::_internal_device_token() const {
  return device_token_.Get();
}
inline void IMDeviceTokenReq::_internal_set_device_token(const std::string& value) {
  
  device_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenReq::_internal_mutable_device_token() {
  
  return device_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenReq::release_device_token() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMDeviceTokenReq::set_allocated_device_token(std::string* device_token) {
  if (device_token != nullptr) {
    
  } else {
    
  }
  device_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.device_token)
}

// .IM.BaseDefine.ClientType client_type = 3;
inline void IMDeviceTokenReq::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMDeviceTokenReq::_internal_client_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline ::IM::BaseDefine::ClientType IMDeviceTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.client_type)
  return _internal_client_type();
}
inline void IMDeviceTokenReq::_internal_set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
}
inline void IMDeviceTokenReq::set_client_type(::IM::BaseDefine::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.client_type)
}

// bytes attach_data = 20;
inline void IMDeviceTokenReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMDeviceTokenReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.attach_data)
}
inline std::string* IMDeviceTokenReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.attach_data)
  return _s;
}
inline const std::string& IMDeviceTokenReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDeviceTokenReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMDeviceTokenReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMDeviceTokenRsp

// uint32 user_id = 1;
inline void IMDeviceTokenRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDeviceTokenRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDeviceTokenRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.user_id)
  return _internal_user_id();
}
inline void IMDeviceTokenRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMDeviceTokenRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.user_id)
}

// bytes attach_data = 20;
inline void IMDeviceTokenRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMDeviceTokenRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline std::string* IMDeviceTokenRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenRsp.attach_data)
  return _s;
}
inline const std::string& IMDeviceTokenRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDeviceTokenRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMDeviceTokenRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMDeviceTokenRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMKickPCClientReq

// uint32 user_id = 1;
inline void IMKickPCClientReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientReq.user_id)
  return _internal_user_id();
}
inline void IMKickPCClientReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMKickPCClientReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientReq.user_id)
}

// -------------------------------------------------------------------

// IMKickPCClientRsp

// uint32 user_id = 1;
inline void IMKickPCClientRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.user_id)
  return _internal_user_id();
}
inline void IMKickPCClientRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMKickPCClientRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.user_id)
}

// uint32 result_code = 2;
inline void IMKickPCClientRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMKickPCClientRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.result_code)
  return _internal_result_code();
}
inline void IMKickPCClientRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMKickPCClientRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.result_code)
}

// -------------------------------------------------------------------

// IMPushShieldReq

// uint32 user_id = 1;
inline void IMPushShieldReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.user_id)
  return _internal_user_id();
}
inline void IMPushShieldReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMPushShieldReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.user_id)
}

// uint32 shield_status = 2;
inline void IMPushShieldReq::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldReq::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.shield_status)
  return _internal_shield_status();
}
inline void IMPushShieldReq::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void IMPushShieldReq::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.shield_status)
}

// bytes attach_data = 20;
inline void IMPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMPushShieldReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.attach_data)
}
inline std::string* IMPushShieldReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldReq.attach_data)
  return _s;
}
inline const std::string& IMPushShieldReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMPushShieldReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMPushShieldReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMPushShieldReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMPushShieldRsp

// uint32 user_id = 1;
inline void IMPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.user_id)
  return _internal_user_id();
}
inline void IMPushShieldRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMPushShieldRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.user_id)
}

// uint32 result_code = 2;
inline void IMPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.result_code)
  return _internal_result_code();
}
inline void IMPushShieldRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMPushShieldRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.result_code)
}

// uint32 shield_status = 3;
inline void IMPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.shield_status)
  return _internal_shield_status();
}
inline void IMPushShieldRsp::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void IMPushShieldRsp::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.shield_status)
}

// bytes attach_data = 20;
inline void IMPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMPushShieldRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.attach_data)
}
inline std::string* IMPushShieldRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldRsp.attach_data)
  return _s;
}
inline const std::string& IMPushShieldRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMPushShieldRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMPushShieldRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMPushShieldRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldReq

// uint32 user_id = 1;
inline void IMQueryPushShieldReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.user_id)
  return _internal_user_id();
}
inline void IMQueryPushShieldReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMQueryPushShieldReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.user_id)
}

// bytes attach_data = 20;
inline void IMQueryPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMQueryPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMQueryPushShieldReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline std::string* IMQueryPushShieldReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldReq.attach_data)
  return _s;
}
inline const std::string& IMQueryPushShieldReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMQueryPushShieldReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMQueryPushShieldReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMQueryPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMQueryPushShieldReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldRsp

// uint32 user_id = 1;
inline void IMQueryPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.user_id)
  return _internal_user_id();
}
inline void IMQueryPushShieldRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMQueryPushShieldRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.user_id)
}

// uint32 result_code = 2;
inline void IMQueryPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.result_code)
  return _internal_result_code();
}
inline void IMQueryPushShieldRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMQueryPushShieldRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.result_code)
}

// uint32 shield_status = 3;
inline void IMQueryPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMQueryPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.shield_status)
  return _internal_shield_status();
}
inline void IMQueryPushShieldRsp::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void IMQueryPushShieldRsp::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.shield_status)
}

// bytes attach_data = 20;
inline void IMQueryPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMQueryPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMQueryPushShieldRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline std::string* IMQueryPushShieldRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldRsp.attach_data)
  return _s;
}
inline const std::string& IMQueryPushShieldRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMQueryPushShieldRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMQueryPushShieldRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMQueryPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMQueryPushShieldRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto
