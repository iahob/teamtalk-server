// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#include "IM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IM {
namespace Message {
constexpr IMMsgData::IMMsgData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_user_id_(0u)
  , to_session_id_(0u)
  , msg_id_(0u)
  , create_time_(0u)
  , msg_type_(0)
{}
struct IMMsgDataDefaultTypeInternal {
  constexpr IMMsgDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataDefaultTypeInternal() {}
  union {
    IMMsgData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataDefaultTypeInternal _IMMsgData_default_instance_;
constexpr IMMsgDataAck::IMMsgDataAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataAckDefaultTypeInternal {
  constexpr IMMsgDataAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataAckDefaultTypeInternal() {}
  union {
    IMMsgDataAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataAckDefaultTypeInternal _IMMsgDataAck_default_instance_;
constexpr IMMsgDataReadAck::IMMsgDataReadAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataReadAckDefaultTypeInternal {
  constexpr IMMsgDataReadAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataReadAckDefaultTypeInternal() {}
  union {
    IMMsgDataReadAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataReadAckDefaultTypeInternal _IMMsgDataReadAck_default_instance_;
constexpr IMMsgDataReadNotify::IMMsgDataReadNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataReadNotifyDefaultTypeInternal {
  constexpr IMMsgDataReadNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataReadNotifyDefaultTypeInternal() {}
  union {
    IMMsgDataReadNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataReadNotifyDefaultTypeInternal _IMMsgDataReadNotify_default_instance_;
constexpr IMClientTimeReq::IMClientTimeReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IMClientTimeReqDefaultTypeInternal {
  constexpr IMClientTimeReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMClientTimeReqDefaultTypeInternal() {}
  union {
    IMClientTimeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMClientTimeReqDefaultTypeInternal _IMClientTimeReq_default_instance_;
constexpr IMClientTimeRsp::IMClientTimeRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_time_(0u){}
struct IMClientTimeRspDefaultTypeInternal {
  constexpr IMClientTimeRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMClientTimeRspDefaultTypeInternal() {}
  union {
    IMClientTimeRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMClientTimeRspDefaultTypeInternal _IMClientTimeRsp_default_instance_;
constexpr IMUnreadMsgCntReq::IMUnreadMsgCntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u){}
struct IMUnreadMsgCntReqDefaultTypeInternal {
  constexpr IMUnreadMsgCntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUnreadMsgCntReqDefaultTypeInternal() {}
  union {
    IMUnreadMsgCntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUnreadMsgCntReqDefaultTypeInternal _IMUnreadMsgCntReq_default_instance_;
constexpr IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unreadinfo_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , total_cnt_(0u){}
struct IMUnreadMsgCntRspDefaultTypeInternal {
  constexpr IMUnreadMsgCntRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUnreadMsgCntRspDefaultTypeInternal() {}
  union {
    IMUnreadMsgCntRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUnreadMsgCntRspDefaultTypeInternal _IMUnreadMsgCntRsp_default_instance_;
constexpr IMGetMsgListReq::IMGetMsgListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , msg_id_begin_(0u)
  , msg_cnt_(0u){}
struct IMGetMsgListReqDefaultTypeInternal {
  constexpr IMGetMsgListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgListReqDefaultTypeInternal() {}
  union {
    IMGetMsgListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgListReqDefaultTypeInternal _IMGetMsgListReq_default_instance_;
constexpr IMGetMsgListRsp::IMGetMsgListRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , msg_id_begin_(0u){}
struct IMGetMsgListRspDefaultTypeInternal {
  constexpr IMGetMsgListRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgListRspDefaultTypeInternal() {}
  union {
    IMGetMsgListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgListRspDefaultTypeInternal _IMGetMsgListRsp_default_instance_;
constexpr IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetLatestMsgIdReqDefaultTypeInternal {
  constexpr IMGetLatestMsgIdReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetLatestMsgIdReqDefaultTypeInternal() {}
  union {
    IMGetLatestMsgIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetLatestMsgIdReqDefaultTypeInternal _IMGetLatestMsgIdReq_default_instance_;
constexpr IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , latest_msg_id_(0u){}
struct IMGetLatestMsgIdRspDefaultTypeInternal {
  constexpr IMGetLatestMsgIdRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetLatestMsgIdRspDefaultTypeInternal() {}
  union {
    IMGetLatestMsgIdRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetLatestMsgIdRspDefaultTypeInternal _IMGetLatestMsgIdRsp_default_instance_;
constexpr IMGetMsgByIdReq::IMGetMsgByIdReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_id_list_()
  , _msg_id_list_cached_byte_size_(0)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetMsgByIdReqDefaultTypeInternal {
  constexpr IMGetMsgByIdReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgByIdReqDefaultTypeInternal() {}
  union {
    IMGetMsgByIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgByIdReqDefaultTypeInternal _IMGetMsgByIdReq_default_instance_;
constexpr IMGetMsgByIdRsp::IMGetMsgByIdRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetMsgByIdRspDefaultTypeInternal {
  constexpr IMGetMsgByIdRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgByIdRspDefaultTypeInternal() {}
  union {
    IMGetMsgByIdRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgByIdRspDefaultTypeInternal _IMGetMsgByIdRsp_default_instance_;
}  // namespace Message
}  // namespace IM
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IM_2eMessage_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_IM_2eMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IM_2eMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IM_2eMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, from_user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, to_session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, msg_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, create_time_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, msg_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, msg_data_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgData, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataAck, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataAck, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataAck, msg_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataAck, session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadAck, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadAck, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadAck, msg_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadAck, session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadNotify, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadNotify, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadNotify, msg_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMMsgDataReadNotify, session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMClientTimeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMClientTimeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMClientTimeRsp, server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntReq, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntRsp, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntRsp, total_cnt_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntRsp, unreadinfo_list_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMUnreadMsgCntRsp, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, msg_id_begin_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, msg_cnt_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListReq, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, msg_id_begin_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, msg_list_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgListRsp, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdReq, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdReq, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, latest_msg_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetLatestMsgIdRsp, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, msg_id_list_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdReq, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, session_type_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, session_id_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, msg_list_),
  PROTOBUF_FIELD_OFFSET(::IM::Message::IMGetMsgByIdRsp, attach_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IM::Message::IMMsgData)},
  { 13, -1, -1, sizeof(::IM::Message::IMMsgDataAck)},
  { 23, -1, -1, sizeof(::IM::Message::IMMsgDataReadAck)},
  { 33, -1, -1, sizeof(::IM::Message::IMMsgDataReadNotify)},
  { 43, -1, -1, sizeof(::IM::Message::IMClientTimeReq)},
  { 49, -1, -1, sizeof(::IM::Message::IMClientTimeRsp)},
  { 56, -1, -1, sizeof(::IM::Message::IMUnreadMsgCntReq)},
  { 64, -1, -1, sizeof(::IM::Message::IMUnreadMsgCntRsp)},
  { 74, -1, -1, sizeof(::IM::Message::IMGetMsgListReq)},
  { 86, -1, -1, sizeof(::IM::Message::IMGetMsgListRsp)},
  { 98, -1, -1, sizeof(::IM::Message::IMGetLatestMsgIdReq)},
  { 108, -1, -1, sizeof(::IM::Message::IMGetLatestMsgIdRsp)},
  { 119, -1, -1, sizeof(::IM::Message::IMGetMsgByIdReq)},
  { 130, -1, -1, sizeof(::IM::Message::IMGetMsgByIdRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMMsgData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMMsgDataAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMMsgDataReadAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMMsgDataReadNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMClientTimeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMClientTimeRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMUnreadMsgCntReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMUnreadMsgCntRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetMsgListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetMsgListRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetLatestMsgIdReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetLatestMsgIdRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetMsgByIdReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::Message::_IMGetMsgByIdRsp_default_instance_),
};

const char descriptor_table_protodef_IM_2eMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020IM.Message.proto\022\nIM.Message\032\023IM.BaseD"
  "efine.proto\"\256\001\n\tIMMsgData\022\024\n\014from_user_i"
  "d\030\001 \001(\r\022\025\n\rto_session_id\030\002 \001(\r\022\016\n\006msg_id"
  "\030\003 \001(\r\022\023\n\013create_time\030\004 \001(\r\022(\n\010msg_type\030"
  "\005 \001(\0162\026.IM.BaseDefine.MsgType\022\020\n\010msg_dat"
  "a\030\006 \001(\014\022\023\n\013attach_data\030\024 \001(\014\"u\n\014IMMsgDat"
  "aAck\022\017\n\007user_id\030\001 \001(\r\022\022\n\nsession_id\030\002 \001("
  "\r\022\016\n\006msg_id\030\003 \001(\r\0220\n\014session_type\030\004 \001(\0162"
  "\032.IM.BaseDefine.SessionType\"y\n\020IMMsgData"
  "ReadAck\022\017\n\007user_id\030\001 \001(\r\022\022\n\nsession_id\030\002"
  " \001(\r\022\016\n\006msg_id\030\003 \001(\r\0220\n\014session_type\030\004 \001"
  "(\0162\032.IM.BaseDefine.SessionType\"|\n\023IMMsgD"
  "ataReadNotify\022\017\n\007user_id\030\001 \001(\r\022\022\n\nsessio"
  "n_id\030\002 \001(\r\022\016\n\006msg_id\030\003 \001(\r\0220\n\014session_ty"
  "pe\030\004 \001(\0162\032.IM.BaseDefine.SessionType\"\021\n\017"
  "IMClientTimeReq\"&\n\017IMClientTimeRsp\022\023\n\013se"
  "rver_time\030\001 \001(\r\"9\n\021IMUnreadMsgCntReq\022\017\n\007"
  "user_id\030\001 \001(\r\022\023\n\013attach_data\030\024 \001(\014\"\200\001\n\021I"
  "MUnreadMsgCntRsp\022\017\n\007user_id\030\001 \001(\r\022\021\n\ttot"
  "al_cnt\030\002 \001(\r\0222\n\017unreadinfo_list\030\003 \003(\0132\031."
  "IM.BaseDefine.UnreadInfo\022\023\n\013attach_data\030"
  "\024 \001(\014\"\244\001\n\017IMGetMsgListReq\022\017\n\007user_id\030\001 \001"
  "(\r\0220\n\014session_type\030\002 \001(\0162\032.IM.BaseDefine"
  ".SessionType\022\022\n\nsession_id\030\003 \001(\r\022\024\n\014msg_"
  "id_begin\030\004 \001(\r\022\017\n\007msg_cnt\030\005 \001(\r\022\023\n\013attac"
  "h_data\030\024 \001(\014\"\275\001\n\017IMGetMsgListRsp\022\017\n\007user"
  "_id\030\001 \001(\r\0220\n\014session_type\030\002 \001(\0162\032.IM.Bas"
  "eDefine.SessionType\022\022\n\nsession_id\030\003 \001(\r\022"
  "\024\n\014msg_id_begin\030\004 \001(\r\022(\n\010msg_list\030\005 \003(\0132"
  "\026.IM.BaseDefine.MsgInfo\022\023\n\013attach_data\030\024"
  " \001(\014\"\201\001\n\023IMGetLatestMsgIdReq\022\017\n\007user_id\030"
  "\001 \001(\r\0220\n\014session_type\030\002 \001(\0162\032.IM.BaseDef"
  "ine.SessionType\022\022\n\nsession_id\030\003 \001(\r\022\023\n\013a"
  "ttach_data\030\024 \001(\014\"\230\001\n\023IMGetLatestMsgIdRsp"
  "\022\017\n\007user_id\030\001 \001(\r\0220\n\014session_type\030\002 \001(\0162"
  "\032.IM.BaseDefine.SessionType\022\022\n\nsession_i"
  "d\030\003 \001(\r\022\025\n\rlatest_msg_id\030\004 \001(\r\022\023\n\013attach"
  "_data\030\024 \001(\014\"\222\001\n\017IMGetMsgByIdReq\022\017\n\007user_"
  "id\030\001 \001(\r\0220\n\014session_type\030\002 \001(\0162\032.IM.Base"
  "Define.SessionType\022\022\n\nsession_id\030\003 \001(\r\022\023"
  "\n\013msg_id_list\030\004 \003(\r\022\023\n\013attach_data\030\024 \001(\014"
  "\"\247\001\n\017IMGetMsgByIdRsp\022\017\n\007user_id\030\001 \001(\r\0220\n"
  "\014session_type\030\002 \001(\0162\032.IM.BaseDefine.Sess"
  "ionType\022\022\n\nsession_id\030\003 \001(\r\022(\n\010msg_list\030"
  "\004 \003(\0132\026.IM.BaseDefine.MsgInfo\022\023\n\013attach_"
  "data\030\024 \001(\014B\031\n\027com.mogujie.tt.protobufb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IM_2eMessage_2eproto_deps[1] = {
  &::descriptor_table_IM_2eBaseDefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IM_2eMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eMessage_2eproto = {
  false, false, 1845, descriptor_table_protodef_IM_2eMessage_2eproto, "IM.Message.proto", 
  &descriptor_table_IM_2eMessage_2eproto_once, descriptor_table_IM_2eMessage_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_IM_2eMessage_2eproto::offsets,
  file_level_metadata_IM_2eMessage_2eproto, file_level_enum_descriptors_IM_2eMessage_2eproto, file_level_service_descriptors_IM_2eMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_IM_2eMessage_2eproto_getter() {
  return &descriptor_table_IM_2eMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_IM_2eMessage_2eproto(&descriptor_table_IM_2eMessage_2eproto);
namespace IM {
namespace Message {

// ===================================================================

class IMMsgData::_Internal {
 public:
};

IMMsgData::IMMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgData)
}
IMMsgData::IMMsgData(const IMMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgData)
}

void IMMsgData::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
}

IMMsgData::~IMMsgData() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMMsgData::ArenaDtor(void* object) {
  IMMsgData* _this = reinterpret_cast< IMMsgData* >(object);
  (void)_this;
}
void IMMsgData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_data_.ClearToEmpty();
  attach_data_.ClearToEmpty();
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMMsgData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 create_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.MsgType msg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::IM::BaseDefine::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes msg_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMMsgData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_session_id = 2;
  if (this->_internal_to_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // uint32 create_time = 4;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_create_time(), target);
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_msg_type(), target);
  }

  // bytes msg_data = 6;
  if (!this->_internal_msg_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_msg_data(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgData)
  return target;
}

size_t IMMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_data = 6;
  if (!this->_internal_msg_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_session_id = 2;
  if (this->_internal_to_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // uint32 create_time = 4;
  if (this->_internal_create_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_create_time());
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMMsgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMMsgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMMsgData::GetClassData() const { return &_class_data_; }

void IMMsgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMMsgData *>(to)->MergeFrom(
      static_cast<const IMMsgData &>(from));
}


void IMMsgData::MergeFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_data().empty()) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_session_id() != 0) {
    _internal_set_to_session_id(from._internal_to_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMMsgData::CopyFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgData::IsInitialized() const {
  return true;
}

void IMMsgData::InternalSwap(IMMsgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_data_, lhs_arena,
      &other->msg_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgData, msg_type_)
      + sizeof(IMMsgData::msg_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgData, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMMsgData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[0]);
}

// ===================================================================

class IMMsgDataAck::_Internal {
 public:
};

IMMsgDataAck::IMMsgDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataAck)
}
IMMsgDataAck::IMMsgDataAck(const IMMsgDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataAck::~IMMsgDataAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMMsgDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataAck::ArenaDtor(void* object) {
  IMMsgDataAck* _this = reinterpret_cast< IMMsgDataAck* >(object);
  (void)_this;
}
void IMMsgDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMMsgDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMMsgDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataAck)
  return target;
}

size_t IMMsgDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMMsgDataAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMMsgDataAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMMsgDataAck::GetClassData() const { return &_class_data_; }

void IMMsgDataAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMMsgDataAck *>(to)->MergeFrom(
      static_cast<const IMMsgDataAck &>(from));
}


void IMMsgDataAck::MergeFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMMsgDataAck::CopyFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataAck::IsInitialized() const {
  return true;
}

void IMMsgDataAck::InternalSwap(IMMsgDataAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataAck, session_type_)
      + sizeof(IMMsgDataAck::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataAck, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMMsgDataAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[1]);
}

// ===================================================================

class IMMsgDataReadAck::_Internal {
 public:
};

IMMsgDataReadAck::IMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataReadAck)
}
IMMsgDataReadAck::IMMsgDataReadAck(const IMMsgDataReadAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataReadAck::~IMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMMsgDataReadAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataReadAck::ArenaDtor(void* object) {
  IMMsgDataReadAck* _this = reinterpret_cast< IMMsgDataReadAck* >(object);
  (void)_this;
}
void IMMsgDataReadAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataReadAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataReadAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMMsgDataReadAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMMsgDataReadAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadAck)
  return target;
}

size_t IMMsgDataReadAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMMsgDataReadAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMMsgDataReadAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMMsgDataReadAck::GetClassData() const { return &_class_data_; }

void IMMsgDataReadAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMMsgDataReadAck *>(to)->MergeFrom(
      static_cast<const IMMsgDataReadAck &>(from));
}


void IMMsgDataReadAck::MergeFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadAck)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMMsgDataReadAck::CopyFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadAck::IsInitialized() const {
  return true;
}

void IMMsgDataReadAck::InternalSwap(IMMsgDataReadAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataReadAck, session_type_)
      + sizeof(IMMsgDataReadAck::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataReadAck, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMMsgDataReadAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[2]);
}

// ===================================================================

class IMMsgDataReadNotify::_Internal {
 public:
};

IMMsgDataReadNotify::IMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataReadNotify)
}
IMMsgDataReadNotify::IMMsgDataReadNotify(const IMMsgDataReadNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataReadNotify::~IMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMMsgDataReadNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataReadNotify::ArenaDtor(void* object) {
  IMMsgDataReadNotify* _this = reinterpret_cast< IMMsgDataReadNotify* >(object);
  (void)_this;
}
void IMMsgDataReadNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataReadNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataReadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMMsgDataReadNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMMsgDataReadNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadNotify)
  return target;
}

size_t IMMsgDataReadNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMMsgDataReadNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMMsgDataReadNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMMsgDataReadNotify::GetClassData() const { return &_class_data_; }

void IMMsgDataReadNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMMsgDataReadNotify *>(to)->MergeFrom(
      static_cast<const IMMsgDataReadNotify &>(from));
}


void IMMsgDataReadNotify::MergeFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMMsgDataReadNotify::CopyFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadNotify::IsInitialized() const {
  return true;
}

void IMMsgDataReadNotify::InternalSwap(IMMsgDataReadNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataReadNotify, session_type_)
      + sizeof(IMMsgDataReadNotify::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataReadNotify, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMMsgDataReadNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[3]);
}

// ===================================================================

class IMClientTimeReq::_Internal {
 public:
};

IMClientTimeReq::IMClientTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMClientTimeReq)
}
IMClientTimeReq::IMClientTimeReq(const IMClientTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMClientTimeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMClientTimeReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IMClientTimeReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[4]);
}

// ===================================================================

class IMClientTimeRsp::_Internal {
 public:
};

IMClientTimeRsp::IMClientTimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMClientTimeRsp)
}
IMClientTimeRsp::IMClientTimeRsp(const IMClientTimeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_time_ = from.server_time_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::SharedCtor() {
server_time_ = 0u;
}

IMClientTimeRsp::~IMClientTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMClientTimeRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMClientTimeRsp::ArenaDtor(void* object) {
  IMClientTimeRsp* _this = reinterpret_cast< IMClientTimeRsp* >(object);
  (void)_this;
}
void IMClientTimeRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMClientTimeRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMClientTimeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMClientTimeRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMClientTimeRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMClientTimeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMClientTimeRsp)
  return target;
}

size_t IMClientTimeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMClientTimeRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMClientTimeRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMClientTimeRsp::GetClassData() const { return &_class_data_; }

void IMClientTimeRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMClientTimeRsp *>(to)->MergeFrom(
      static_cast<const IMClientTimeRsp &>(from));
}


void IMClientTimeRsp::MergeFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMClientTimeRsp::CopyFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeRsp::IsInitialized() const {
  return true;
}

void IMClientTimeRsp::InternalSwap(IMClientTimeRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_time_, other->server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMClientTimeRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[5]);
}

// ===================================================================

class IMUnreadMsgCntReq::_Internal {
 public:
};

IMUnreadMsgCntReq::IMUnreadMsgCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMUnreadMsgCntReq)
}
IMUnreadMsgCntReq::IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_ = 0u;
}

IMUnreadMsgCntReq::~IMUnreadMsgCntReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMUnreadMsgCntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntReq::ArenaDtor(void* object) {
  IMUnreadMsgCntReq* _this = reinterpret_cast< IMUnreadMsgCntReq* >(object);
  (void)_this;
}
void IMUnreadMsgCntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUnreadMsgCntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUnreadMsgCntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  user_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUnreadMsgCntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUnreadMsgCntReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntReq)
  return target;
}

size_t IMUnreadMsgCntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUnreadMsgCntReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUnreadMsgCntReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUnreadMsgCntReq::GetClassData() const { return &_class_data_; }

void IMUnreadMsgCntReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUnreadMsgCntReq *>(to)->MergeFrom(
      static_cast<const IMUnreadMsgCntReq &>(from));
}


void IMUnreadMsgCntReq::MergeFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUnreadMsgCntReq::CopyFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntReq::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntReq::InternalSwap(IMUnreadMsgCntReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUnreadMsgCntReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[6]);
}

// ===================================================================

class IMUnreadMsgCntRsp::_Internal {
 public:
};

void IMUnreadMsgCntRsp::clear_unreadinfo_list() {
  unreadinfo_list_.Clear();
}
IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unreadinfo_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMUnreadMsgCntRsp)
}
IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unreadinfo_list_(from.unreadinfo_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
}

IMUnreadMsgCntRsp::~IMUnreadMsgCntRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMUnreadMsgCntRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntRsp::ArenaDtor(void* object) {
  IMUnreadMsgCntRsp* _this = reinterpret_cast< IMUnreadMsgCntRsp* >(object);
  (void)_this;
}
void IMUnreadMsgCntRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUnreadMsgCntRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUnreadMsgCntRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unreadinfo_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUnreadMsgCntRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unreadinfo_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUnreadMsgCntRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 total_cnt = 2;
  if (this->_internal_total_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_cnt(), target);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unreadinfo_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_unreadinfo_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntRsp)
  return target;
}

size_t IMUnreadMsgCntRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  total_size += 1UL * this->_internal_unreadinfo_list_size();
  for (const auto& msg : this->unreadinfo_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 total_cnt = 2;
  if (this->_internal_total_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUnreadMsgCntRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUnreadMsgCntRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUnreadMsgCntRsp::GetClassData() const { return &_class_data_; }

void IMUnreadMsgCntRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUnreadMsgCntRsp *>(to)->MergeFrom(
      static_cast<const IMUnreadMsgCntRsp &>(from));
}


void IMUnreadMsgCntRsp::MergeFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unreadinfo_list_.MergeFrom(from.unreadinfo_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_total_cnt() != 0) {
    _internal_set_total_cnt(from._internal_total_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUnreadMsgCntRsp::CopyFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntRsp::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntRsp::InternalSwap(IMUnreadMsgCntRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unreadinfo_list_.InternalSwap(&other->unreadinfo_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUnreadMsgCntRsp, total_cnt_)
      + sizeof(IMUnreadMsgCntRsp::total_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMUnreadMsgCntRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUnreadMsgCntRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[7]);
}

// ===================================================================

class IMGetMsgListReq::_Internal {
 public:
};

IMGetMsgListReq::IMGetMsgListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgListReq)
}
IMGetMsgListReq::IMGetMsgListReq(const IMGetMsgListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
}

IMGetMsgListReq::~IMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetMsgListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListReq::ArenaDtor(void* object) {
  IMGetMsgListReq* _this = reinterpret_cast< IMGetMsgListReq* >(object);
  (void)_this;
}
void IMGetMsgListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetMsgListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id_begin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_id_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetMsgListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msg_id_begin(), target);
  }

  // uint32 msg_cnt = 5;
  if (this->_internal_msg_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_msg_cnt(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListReq)
  return target;
}

size_t IMGetMsgListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id_begin());
  }

  // uint32 msg_cnt = 5;
  if (this->_internal_msg_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetMsgListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetMsgListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetMsgListReq::GetClassData() const { return &_class_data_; }

void IMGetMsgListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetMsgListReq *>(to)->MergeFrom(
      static_cast<const IMGetMsgListReq &>(from));
}


void IMGetMsgListReq::MergeFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id_begin() != 0) {
    _internal_set_msg_id_begin(from._internal_msg_id_begin());
  }
  if (from._internal_msg_cnt() != 0) {
    _internal_set_msg_cnt(from._internal_msg_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetMsgListReq::CopyFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListReq::IsInitialized() const {
  return true;
}

void IMGetMsgListReq::InternalSwap(IMGetMsgListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgListReq, msg_cnt_)
      + sizeof(IMGetMsgListReq::msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgListReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetMsgListReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[8]);
}

// ===================================================================

class IMGetMsgListRsp::_Internal {
 public:
};

void IMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
IMGetMsgListRsp::IMGetMsgListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgListRsp)
}
IMGetMsgListRsp::IMGetMsgListRsp(const IMGetMsgListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
}

IMGetMsgListRsp::~IMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetMsgListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListRsp::ArenaDtor(void* object) {
  IMGetMsgListRsp* _this = reinterpret_cast< IMGetMsgListRsp* >(object);
  (void)_this;
}
void IMGetMsgListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_begin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetMsgListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id_begin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_id_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetMsgListRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msg_id_begin(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_msg_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListRsp)
  return target;
}

size_t IMGetMsgListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id_begin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetMsgListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetMsgListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetMsgListRsp::GetClassData() const { return &_class_data_; }

void IMGetMsgListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetMsgListRsp *>(to)->MergeFrom(
      static_cast<const IMGetMsgListRsp &>(from));
}


void IMGetMsgListRsp::MergeFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id_begin() != 0) {
    _internal_set_msg_id_begin(from._internal_msg_id_begin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetMsgListRsp::CopyFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListRsp::IsInitialized() const {
  return true;
}

void IMGetMsgListRsp::InternalSwap(IMGetMsgListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgListRsp, msg_id_begin_)
      + sizeof(IMGetMsgListRsp::msg_id_begin_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgListRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetMsgListRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[9]);
}

// ===================================================================

class IMGetLatestMsgIdReq::_Internal {
 public:
};

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetLatestMsgIdReq)
}
IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetLatestMsgIdReq::~IMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetLatestMsgIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdReq::ArenaDtor(void* object) {
  IMGetLatestMsgIdReq* _this = reinterpret_cast< IMGetLatestMsgIdReq* >(object);
  (void)_this;
}
void IMGetLatestMsgIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetLatestMsgIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetLatestMsgIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetLatestMsgIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetLatestMsgIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdReq)
  return target;
}

size_t IMGetLatestMsgIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetLatestMsgIdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetLatestMsgIdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetLatestMsgIdReq::GetClassData() const { return &_class_data_; }

void IMGetLatestMsgIdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetLatestMsgIdReq *>(to)->MergeFrom(
      static_cast<const IMGetLatestMsgIdReq &>(from));
}


void IMGetLatestMsgIdReq::MergeFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetLatestMsgIdReq::CopyFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdReq::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdReq::InternalSwap(IMGetLatestMsgIdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdReq, session_id_)
      + sizeof(IMGetLatestMsgIdReq::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetLatestMsgIdReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[10]);
}

// ===================================================================

class IMGetLatestMsgIdRsp::_Internal {
 public:
};

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetLatestMsgIdRsp)
}
IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
}

IMGetLatestMsgIdRsp::~IMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetLatestMsgIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdRsp::ArenaDtor(void* object) {
  IMGetLatestMsgIdRsp* _this = reinterpret_cast< IMGetLatestMsgIdRsp* >(object);
  (void)_this;
}
void IMGetLatestMsgIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetLatestMsgIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetLatestMsgIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 latest_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          latest_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetLatestMsgIdRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 latest_msg_id = 4;
  if (this->_internal_latest_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_latest_msg_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdRsp)
  return target;
}

size_t IMGetLatestMsgIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 latest_msg_id = 4;
  if (this->_internal_latest_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_latest_msg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetLatestMsgIdRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetLatestMsgIdRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetLatestMsgIdRsp::GetClassData() const { return &_class_data_; }

void IMGetLatestMsgIdRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetLatestMsgIdRsp *>(to)->MergeFrom(
      static_cast<const IMGetLatestMsgIdRsp &>(from));
}


void IMGetLatestMsgIdRsp::MergeFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_latest_msg_id() != 0) {
    _internal_set_latest_msg_id(from._internal_latest_msg_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetLatestMsgIdRsp::CopyFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdRsp::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdRsp::InternalSwap(IMGetLatestMsgIdRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdRsp, latest_msg_id_)
      + sizeof(IMGetLatestMsgIdRsp::latest_msg_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetLatestMsgIdRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[11]);
}

// ===================================================================

class IMGetMsgByIdReq::_Internal {
 public:
};

IMGetMsgByIdReq::IMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgByIdReq)
}
IMGetMsgByIdReq::IMGetMsgByIdReq(const IMGetMsgByIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_id_list_(from.msg_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetMsgByIdReq::~IMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetMsgByIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdReq::ArenaDtor(void* object) {
  IMGetMsgByIdReq* _this = reinterpret_cast< IMGetMsgByIdReq* >(object);
  (void)_this;
}
void IMGetMsgByIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgByIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetMsgByIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 msg_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_msg_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetMsgByIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // repeated uint32 msg_id_list = 4;
  {
    int byte_size = _msg_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_msg_id_list(), byte_size, target);
    }
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdReq)
  return target;
}

size_t IMGetMsgByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 msg_id_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetMsgByIdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetMsgByIdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetMsgByIdReq::GetClassData() const { return &_class_data_; }

void IMGetMsgByIdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetMsgByIdReq *>(to)->MergeFrom(
      static_cast<const IMGetMsgByIdReq &>(from));
}


void IMGetMsgByIdReq::MergeFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetMsgByIdReq::CopyFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdReq::IsInitialized() const {
  return true;
}

void IMGetMsgByIdReq::InternalSwap(IMGetMsgByIdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_id_list_.InternalSwap(&other->msg_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgByIdReq, session_id_)
      + sizeof(IMGetMsgByIdReq::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgByIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetMsgByIdReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[12]);
}

// ===================================================================

class IMGetMsgByIdRsp::_Internal {
 public:
};

void IMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
IMGetMsgByIdRsp::IMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgByIdRsp)
}
IMGetMsgByIdRsp::IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetMsgByIdRsp::~IMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMGetMsgByIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdRsp::ArenaDtor(void* object) {
  IMGetMsgByIdRsp* _this = reinterpret_cast< IMGetMsgByIdRsp* >(object);
  (void)_this;
}
void IMGetMsgByIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgByIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgByIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMGetMsgByIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetMsgByIdRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msg_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdRsp)
  return target;
}

size_t IMGetMsgByIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMGetMsgByIdRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMGetMsgByIdRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMGetMsgByIdRsp::GetClassData() const { return &_class_data_; }

void IMGetMsgByIdRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMGetMsgByIdRsp *>(to)->MergeFrom(
      static_cast<const IMGetMsgByIdRsp &>(from));
}


void IMGetMsgByIdRsp::MergeFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMGetMsgByIdRsp::CopyFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdRsp::IsInitialized() const {
  return true;
}

void IMGetMsgByIdRsp::InternalSwap(IMGetMsgByIdRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgByIdRsp, session_id_)
      + sizeof(IMGetMsgByIdRsp::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgByIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMGetMsgByIdRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eMessage_2eproto_getter, &descriptor_table_IM_2eMessage_2eproto_once,
      file_level_metadata_IM_2eMessage_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgData* Arena::CreateMaybeMessage< ::IM::Message::IMMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataAck* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataReadAck* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataReadAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataReadAck >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataReadNotify* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataReadNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataReadNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMClientTimeReq* Arena::CreateMaybeMessage< ::IM::Message::IMClientTimeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMClientTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMClientTimeRsp* Arena::CreateMaybeMessage< ::IM::Message::IMClientTimeRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMClientTimeRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMUnreadMsgCntReq* Arena::CreateMaybeMessage< ::IM::Message::IMUnreadMsgCntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMUnreadMsgCntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMUnreadMsgCntRsp* Arena::CreateMaybeMessage< ::IM::Message::IMUnreadMsgCntRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMUnreadMsgCntRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgListReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgListRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetLatestMsgIdReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetLatestMsgIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetLatestMsgIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetLatestMsgIdRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetLatestMsgIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetLatestMsgIdRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgByIdReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgByIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgByIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgByIdRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgByIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgByIdRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
