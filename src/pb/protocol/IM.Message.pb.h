// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eMessage_2eproto;
namespace IM {
namespace Message {
class IMClientTimeReq;
struct IMClientTimeReqDefaultTypeInternal;
extern IMClientTimeReqDefaultTypeInternal _IMClientTimeReq_default_instance_;
class IMClientTimeRsp;
struct IMClientTimeRspDefaultTypeInternal;
extern IMClientTimeRspDefaultTypeInternal _IMClientTimeRsp_default_instance_;
class IMGetLatestMsgIdReq;
struct IMGetLatestMsgIdReqDefaultTypeInternal;
extern IMGetLatestMsgIdReqDefaultTypeInternal _IMGetLatestMsgIdReq_default_instance_;
class IMGetLatestMsgIdRsp;
struct IMGetLatestMsgIdRspDefaultTypeInternal;
extern IMGetLatestMsgIdRspDefaultTypeInternal _IMGetLatestMsgIdRsp_default_instance_;
class IMGetMsgByIdReq;
struct IMGetMsgByIdReqDefaultTypeInternal;
extern IMGetMsgByIdReqDefaultTypeInternal _IMGetMsgByIdReq_default_instance_;
class IMGetMsgByIdRsp;
struct IMGetMsgByIdRspDefaultTypeInternal;
extern IMGetMsgByIdRspDefaultTypeInternal _IMGetMsgByIdRsp_default_instance_;
class IMGetMsgListReq;
struct IMGetMsgListReqDefaultTypeInternal;
extern IMGetMsgListReqDefaultTypeInternal _IMGetMsgListReq_default_instance_;
class IMGetMsgListRsp;
struct IMGetMsgListRspDefaultTypeInternal;
extern IMGetMsgListRspDefaultTypeInternal _IMGetMsgListRsp_default_instance_;
class IMMsgData;
struct IMMsgDataDefaultTypeInternal;
extern IMMsgDataDefaultTypeInternal _IMMsgData_default_instance_;
class IMMsgDataAck;
struct IMMsgDataAckDefaultTypeInternal;
extern IMMsgDataAckDefaultTypeInternal _IMMsgDataAck_default_instance_;
class IMMsgDataReadAck;
struct IMMsgDataReadAckDefaultTypeInternal;
extern IMMsgDataReadAckDefaultTypeInternal _IMMsgDataReadAck_default_instance_;
class IMMsgDataReadNotify;
struct IMMsgDataReadNotifyDefaultTypeInternal;
extern IMMsgDataReadNotifyDefaultTypeInternal _IMMsgDataReadNotify_default_instance_;
class IMUnreadMsgCntReq;
struct IMUnreadMsgCntReqDefaultTypeInternal;
extern IMUnreadMsgCntReqDefaultTypeInternal _IMUnreadMsgCntReq_default_instance_;
class IMUnreadMsgCntRsp;
struct IMUnreadMsgCntRspDefaultTypeInternal;
extern IMUnreadMsgCntRspDefaultTypeInternal _IMUnreadMsgCntRsp_default_instance_;
}  // namespace Message
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Message::IMClientTimeReq* Arena::CreateMaybeMessage<::IM::Message::IMClientTimeReq>(Arena*);
template<> ::IM::Message::IMClientTimeRsp* Arena::CreateMaybeMessage<::IM::Message::IMClientTimeRsp>(Arena*);
template<> ::IM::Message::IMGetLatestMsgIdReq* Arena::CreateMaybeMessage<::IM::Message::IMGetLatestMsgIdReq>(Arena*);
template<> ::IM::Message::IMGetLatestMsgIdRsp* Arena::CreateMaybeMessage<::IM::Message::IMGetLatestMsgIdRsp>(Arena*);
template<> ::IM::Message::IMGetMsgByIdReq* Arena::CreateMaybeMessage<::IM::Message::IMGetMsgByIdReq>(Arena*);
template<> ::IM::Message::IMGetMsgByIdRsp* Arena::CreateMaybeMessage<::IM::Message::IMGetMsgByIdRsp>(Arena*);
template<> ::IM::Message::IMGetMsgListReq* Arena::CreateMaybeMessage<::IM::Message::IMGetMsgListReq>(Arena*);
template<> ::IM::Message::IMGetMsgListRsp* Arena::CreateMaybeMessage<::IM::Message::IMGetMsgListRsp>(Arena*);
template<> ::IM::Message::IMMsgData* Arena::CreateMaybeMessage<::IM::Message::IMMsgData>(Arena*);
template<> ::IM::Message::IMMsgDataAck* Arena::CreateMaybeMessage<::IM::Message::IMMsgDataAck>(Arena*);
template<> ::IM::Message::IMMsgDataReadAck* Arena::CreateMaybeMessage<::IM::Message::IMMsgDataReadAck>(Arena*);
template<> ::IM::Message::IMMsgDataReadNotify* Arena::CreateMaybeMessage<::IM::Message::IMMsgDataReadNotify>(Arena*);
template<> ::IM::Message::IMUnreadMsgCntReq* Arena::CreateMaybeMessage<::IM::Message::IMUnreadMsgCntReq>(Arena*);
template<> ::IM::Message::IMUnreadMsgCntRsp* Arena::CreateMaybeMessage<::IM::Message::IMUnreadMsgCntRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Message {

// ===================================================================

class IMMsgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgData) */ {
 public:
  inline IMMsgData() : IMMsgData(nullptr) {}
  ~IMMsgData() override;
  explicit constexpr IMMsgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgData(const IMMsgData& from);
  IMMsgData(IMMsgData&& from) noexcept
    : IMMsgData() {
    *this = ::std::move(from);
  }

  inline IMMsgData& operator=(const IMMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgData& operator=(IMMsgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgData* internal_default_instance() {
    return reinterpret_cast<const IMMsgData*>(
               &_IMMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMMsgData& a, IMMsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgData* New() const final {
    return new IMMsgData();
  }

  IMMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgData";
  }
  protected:
  explicit IMMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgDataFieldNumber = 6,
    kAttachDataFieldNumber = 20,
    kFromUserIdFieldNumber = 1,
    kToSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
    kMsgTypeFieldNumber = 5,
  };
  // bytes msg_data = 6;
  void clear_msg_data();
  const std::string& msg_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_session_id = 2;
  void clear_to_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_session_id() const;
  void set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_session_id() const;
  void _internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 create_time = 4;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.MsgType msg_type = 5;
  void clear_msg_type();
  ::IM::BaseDefine::MsgType msg_type() const;
  void set_msg_type(::IM::BaseDefine::MsgType value);
  private:
  ::IM::BaseDefine::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::IM::BaseDefine::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMMsgDataAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgDataAck) */ {
 public:
  inline IMMsgDataAck() : IMMsgDataAck(nullptr) {}
  ~IMMsgDataAck() override;
  explicit constexpr IMMsgDataAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgDataAck(const IMMsgDataAck& from);
  IMMsgDataAck(IMMsgDataAck&& from) noexcept
    : IMMsgDataAck() {
    *this = ::std::move(from);
  }

  inline IMMsgDataAck& operator=(const IMMsgDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgDataAck& operator=(IMMsgDataAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgDataAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgDataAck* internal_default_instance() {
    return reinterpret_cast<const IMMsgDataAck*>(
               &_IMMsgDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMMsgDataAck& a, IMMsgDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgDataAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgDataAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgDataAck* New() const final {
    return new IMMsgDataAck();
  }

  IMMsgDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgDataAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgDataAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgDataAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgDataAck";
  }
  protected:
  explicit IMMsgDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSessionTypeFieldNumber = 4,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 4;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMMsgDataReadAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgDataReadAck) */ {
 public:
  inline IMMsgDataReadAck() : IMMsgDataReadAck(nullptr) {}
  ~IMMsgDataReadAck() override;
  explicit constexpr IMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgDataReadAck(const IMMsgDataReadAck& from);
  IMMsgDataReadAck(IMMsgDataReadAck&& from) noexcept
    : IMMsgDataReadAck() {
    *this = ::std::move(from);
  }

  inline IMMsgDataReadAck& operator=(const IMMsgDataReadAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgDataReadAck& operator=(IMMsgDataReadAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgDataReadAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgDataReadAck* internal_default_instance() {
    return reinterpret_cast<const IMMsgDataReadAck*>(
               &_IMMsgDataReadAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMMsgDataReadAck& a, IMMsgDataReadAck& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgDataReadAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgDataReadAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgDataReadAck* New() const final {
    return new IMMsgDataReadAck();
  }

  IMMsgDataReadAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgDataReadAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgDataReadAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgDataReadAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgDataReadAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgDataReadAck";
  }
  protected:
  explicit IMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSessionTypeFieldNumber = 4,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 4;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataReadAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMMsgDataReadNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgDataReadNotify) */ {
 public:
  inline IMMsgDataReadNotify() : IMMsgDataReadNotify(nullptr) {}
  ~IMMsgDataReadNotify() override;
  explicit constexpr IMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMMsgDataReadNotify(const IMMsgDataReadNotify& from);
  IMMsgDataReadNotify(IMMsgDataReadNotify&& from) noexcept
    : IMMsgDataReadNotify() {
    *this = ::std::move(from);
  }

  inline IMMsgDataReadNotify& operator=(const IMMsgDataReadNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgDataReadNotify& operator=(IMMsgDataReadNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMMsgDataReadNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMMsgDataReadNotify* internal_default_instance() {
    return reinterpret_cast<const IMMsgDataReadNotify*>(
               &_IMMsgDataReadNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMMsgDataReadNotify& a, IMMsgDataReadNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMMsgDataReadNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMMsgDataReadNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMMsgDataReadNotify* New() const final {
    return new IMMsgDataReadNotify();
  }

  IMMsgDataReadNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgDataReadNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMMsgDataReadNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMMsgDataReadNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMMsgDataReadNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgDataReadNotify";
  }
  protected:
  explicit IMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSessionTypeFieldNumber = 4,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 4;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataReadNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMClientTimeReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:IM.Message.IMClientTimeReq) */ {
 public:
  inline IMClientTimeReq() : IMClientTimeReq(nullptr) {}
  explicit constexpr IMClientTimeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMClientTimeReq(const IMClientTimeReq& from);
  IMClientTimeReq(IMClientTimeReq&& from) noexcept
    : IMClientTimeReq() {
    *this = ::std::move(from);
  }

  inline IMClientTimeReq& operator=(const IMClientTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMClientTimeReq& operator=(IMClientTimeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMClientTimeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMClientTimeReq* internal_default_instance() {
    return reinterpret_cast<const IMClientTimeReq*>(
               &_IMClientTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMClientTimeReq& a, IMClientTimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMClientTimeReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMClientTimeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMClientTimeReq* New() const final {
    return new IMClientTimeReq();
  }

  IMClientTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMClientTimeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IMClientTimeReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IMClientTimeReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMClientTimeReq";
  }
  protected:
  explicit IMClientTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Message.IMClientTimeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMClientTimeRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMClientTimeRsp) */ {
 public:
  inline IMClientTimeRsp() : IMClientTimeRsp(nullptr) {}
  ~IMClientTimeRsp() override;
  explicit constexpr IMClientTimeRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMClientTimeRsp(const IMClientTimeRsp& from);
  IMClientTimeRsp(IMClientTimeRsp&& from) noexcept
    : IMClientTimeRsp() {
    *this = ::std::move(from);
  }

  inline IMClientTimeRsp& operator=(const IMClientTimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMClientTimeRsp& operator=(IMClientTimeRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMClientTimeRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMClientTimeRsp* internal_default_instance() {
    return reinterpret_cast<const IMClientTimeRsp*>(
               &_IMClientTimeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMClientTimeRsp& a, IMClientTimeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMClientTimeRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMClientTimeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMClientTimeRsp* New() const final {
    return new IMClientTimeRsp();
  }

  IMClientTimeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMClientTimeRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMClientTimeRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMClientTimeRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMClientTimeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMClientTimeRsp";
  }
  protected:
  explicit IMClientTimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
  };
  // uint32 server_time = 1;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMClientTimeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMUnreadMsgCntReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMUnreadMsgCntReq) */ {
 public:
  inline IMUnreadMsgCntReq() : IMUnreadMsgCntReq(nullptr) {}
  ~IMUnreadMsgCntReq() override;
  explicit constexpr IMUnreadMsgCntReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from);
  IMUnreadMsgCntReq(IMUnreadMsgCntReq&& from) noexcept
    : IMUnreadMsgCntReq() {
    *this = ::std::move(from);
  }

  inline IMUnreadMsgCntReq& operator=(const IMUnreadMsgCntReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUnreadMsgCntReq& operator=(IMUnreadMsgCntReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUnreadMsgCntReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUnreadMsgCntReq* internal_default_instance() {
    return reinterpret_cast<const IMUnreadMsgCntReq*>(
               &_IMUnreadMsgCntReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMUnreadMsgCntReq& a, IMUnreadMsgCntReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUnreadMsgCntReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUnreadMsgCntReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUnreadMsgCntReq* New() const final {
    return new IMUnreadMsgCntReq();
  }

  IMUnreadMsgCntReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUnreadMsgCntReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUnreadMsgCntReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUnreadMsgCntReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUnreadMsgCntReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMUnreadMsgCntReq";
  }
  protected:
  explicit IMUnreadMsgCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMUnreadMsgCntReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMUnreadMsgCntRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMUnreadMsgCntRsp) */ {
 public:
  inline IMUnreadMsgCntRsp() : IMUnreadMsgCntRsp(nullptr) {}
  ~IMUnreadMsgCntRsp() override;
  explicit constexpr IMUnreadMsgCntRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from);
  IMUnreadMsgCntRsp(IMUnreadMsgCntRsp&& from) noexcept
    : IMUnreadMsgCntRsp() {
    *this = ::std::move(from);
  }

  inline IMUnreadMsgCntRsp& operator=(const IMUnreadMsgCntRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUnreadMsgCntRsp& operator=(IMUnreadMsgCntRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUnreadMsgCntRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUnreadMsgCntRsp* internal_default_instance() {
    return reinterpret_cast<const IMUnreadMsgCntRsp*>(
               &_IMUnreadMsgCntRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMUnreadMsgCntRsp& a, IMUnreadMsgCntRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUnreadMsgCntRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUnreadMsgCntRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUnreadMsgCntRsp* New() const final {
    return new IMUnreadMsgCntRsp();
  }

  IMUnreadMsgCntRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUnreadMsgCntRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUnreadMsgCntRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUnreadMsgCntRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUnreadMsgCntRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMUnreadMsgCntRsp";
  }
  protected:
  explicit IMUnreadMsgCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreadinfoListFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kTotalCntFieldNumber = 2,
  };
  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  int unreadinfo_list_size() const;
  private:
  int _internal_unreadinfo_list_size() const;
  public:
  void clear_unreadinfo_list();
  ::IM::BaseDefine::UnreadInfo* mutable_unreadinfo_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
      mutable_unreadinfo_list();
  private:
  const ::IM::BaseDefine::UnreadInfo& _internal_unreadinfo_list(int index) const;
  ::IM::BaseDefine::UnreadInfo* _internal_add_unreadinfo_list();
  public:
  const ::IM::BaseDefine::UnreadInfo& unreadinfo_list(int index) const;
  ::IM::BaseDefine::UnreadInfo* add_unreadinfo_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
      unreadinfo_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_cnt = 2;
  void clear_total_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_cnt() const;
  void set_total_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_cnt() const;
  void _internal_set_total_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMUnreadMsgCntRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo > unreadinfo_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetMsgListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetMsgListReq) */ {
 public:
  inline IMGetMsgListReq() : IMGetMsgListReq(nullptr) {}
  ~IMGetMsgListReq() override;
  explicit constexpr IMGetMsgListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetMsgListReq(const IMGetMsgListReq& from);
  IMGetMsgListReq(IMGetMsgListReq&& from) noexcept
    : IMGetMsgListReq() {
    *this = ::std::move(from);
  }

  inline IMGetMsgListReq& operator=(const IMGetMsgListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetMsgListReq& operator=(IMGetMsgListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetMsgListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetMsgListReq* internal_default_instance() {
    return reinterpret_cast<const IMGetMsgListReq*>(
               &_IMGetMsgListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMGetMsgListReq& a, IMGetMsgListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetMsgListReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetMsgListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetMsgListReq* New() const final {
    return new IMGetMsgListReq();
  }

  IMGetMsgListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetMsgListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetMsgListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetMsgListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetMsgListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetMsgListReq";
  }
  protected:
  explicit IMGetMsgListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kMsgIdBeginFieldNumber = 4,
    kMsgCntFieldNumber = 5,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id_begin = 4;
  void clear_msg_id_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_begin() const;
  void set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id_begin() const;
  void _internal_set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_cnt = 5;
  void clear_msg_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cnt() const;
  void set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_cnt() const;
  void _internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetMsgListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetMsgListRsp) */ {
 public:
  inline IMGetMsgListRsp() : IMGetMsgListRsp(nullptr) {}
  ~IMGetMsgListRsp() override;
  explicit constexpr IMGetMsgListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetMsgListRsp(const IMGetMsgListRsp& from);
  IMGetMsgListRsp(IMGetMsgListRsp&& from) noexcept
    : IMGetMsgListRsp() {
    *this = ::std::move(from);
  }

  inline IMGetMsgListRsp& operator=(const IMGetMsgListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetMsgListRsp& operator=(IMGetMsgListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetMsgListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetMsgListRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetMsgListRsp*>(
               &_IMGetMsgListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMGetMsgListRsp& a, IMGetMsgListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetMsgListRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetMsgListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetMsgListRsp* New() const final {
    return new IMGetMsgListRsp();
  }

  IMGetMsgListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetMsgListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetMsgListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetMsgListRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetMsgListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetMsgListRsp";
  }
  protected:
  explicit IMGetMsgListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 5,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kMsgIdBeginFieldNumber = 4,
  };
  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::IM::BaseDefine::MsgInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
      mutable_msg_list();
  private:
  const ::IM::BaseDefine::MsgInfo& _internal_msg_list(int index) const;
  ::IM::BaseDefine::MsgInfo* _internal_add_msg_list();
  public:
  const ::IM::BaseDefine::MsgInfo& msg_list(int index) const;
  ::IM::BaseDefine::MsgInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
      msg_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_id_begin = 4;
  void clear_msg_id_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_begin() const;
  void set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id_begin() const;
  void _internal_set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_begin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetLatestMsgIdReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetLatestMsgIdReq) */ {
 public:
  inline IMGetLatestMsgIdReq() : IMGetLatestMsgIdReq(nullptr) {}
  ~IMGetLatestMsgIdReq() override;
  explicit constexpr IMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from);
  IMGetLatestMsgIdReq(IMGetLatestMsgIdReq&& from) noexcept
    : IMGetLatestMsgIdReq() {
    *this = ::std::move(from);
  }

  inline IMGetLatestMsgIdReq& operator=(const IMGetLatestMsgIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetLatestMsgIdReq& operator=(IMGetLatestMsgIdReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetLatestMsgIdReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetLatestMsgIdReq* internal_default_instance() {
    return reinterpret_cast<const IMGetLatestMsgIdReq*>(
               &_IMGetLatestMsgIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMGetLatestMsgIdReq& a, IMGetLatestMsgIdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetLatestMsgIdReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetLatestMsgIdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetLatestMsgIdReq* New() const final {
    return new IMGetLatestMsgIdReq();
  }

  IMGetLatestMsgIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetLatestMsgIdReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetLatestMsgIdReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetLatestMsgIdReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetLatestMsgIdReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetLatestMsgIdReq";
  }
  protected:
  explicit IMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetLatestMsgIdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetLatestMsgIdRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetLatestMsgIdRsp) */ {
 public:
  inline IMGetLatestMsgIdRsp() : IMGetLatestMsgIdRsp(nullptr) {}
  ~IMGetLatestMsgIdRsp() override;
  explicit constexpr IMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from);
  IMGetLatestMsgIdRsp(IMGetLatestMsgIdRsp&& from) noexcept
    : IMGetLatestMsgIdRsp() {
    *this = ::std::move(from);
  }

  inline IMGetLatestMsgIdRsp& operator=(const IMGetLatestMsgIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetLatestMsgIdRsp& operator=(IMGetLatestMsgIdRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetLatestMsgIdRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetLatestMsgIdRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetLatestMsgIdRsp*>(
               &_IMGetLatestMsgIdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IMGetLatestMsgIdRsp& a, IMGetLatestMsgIdRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetLatestMsgIdRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetLatestMsgIdRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetLatestMsgIdRsp* New() const final {
    return new IMGetLatestMsgIdRsp();
  }

  IMGetLatestMsgIdRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetLatestMsgIdRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetLatestMsgIdRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetLatestMsgIdRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetLatestMsgIdRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetLatestMsgIdRsp";
  }
  protected:
  explicit IMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kLatestMsgIdFieldNumber = 4,
  };
  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latest_msg_id = 4;
  void clear_latest_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id() const;
  void set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_msg_id() const;
  void _internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetLatestMsgIdRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetMsgByIdReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetMsgByIdReq) */ {
 public:
  inline IMGetMsgByIdReq() : IMGetMsgByIdReq(nullptr) {}
  ~IMGetMsgByIdReq() override;
  explicit constexpr IMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetMsgByIdReq(const IMGetMsgByIdReq& from);
  IMGetMsgByIdReq(IMGetMsgByIdReq&& from) noexcept
    : IMGetMsgByIdReq() {
    *this = ::std::move(from);
  }

  inline IMGetMsgByIdReq& operator=(const IMGetMsgByIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetMsgByIdReq& operator=(IMGetMsgByIdReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetMsgByIdReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetMsgByIdReq* internal_default_instance() {
    return reinterpret_cast<const IMGetMsgByIdReq*>(
               &_IMGetMsgByIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IMGetMsgByIdReq& a, IMGetMsgByIdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetMsgByIdReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetMsgByIdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetMsgByIdReq* New() const final {
    return new IMGetMsgByIdReq();
  }

  IMGetMsgByIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetMsgByIdReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetMsgByIdReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetMsgByIdReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetMsgByIdReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetMsgByIdReq";
  }
  protected:
  explicit IMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdListFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // repeated uint32 msg_id_list = 4;
  int msg_id_list_size() const;
  private:
  int _internal_msg_id_list_size() const;
  public:
  void clear_msg_id_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_msg_id_list() const;
  void _internal_add_msg_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_msg_id_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_list(int index) const;
  void set_msg_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_msg_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      msg_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_msg_id_list();

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgByIdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > msg_id_list_;
  mutable std::atomic<int> _msg_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMGetMsgByIdRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Message.IMGetMsgByIdRsp) */ {
 public:
  inline IMGetMsgByIdRsp() : IMGetMsgByIdRsp(nullptr) {}
  ~IMGetMsgByIdRsp() override;
  explicit constexpr IMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from);
  IMGetMsgByIdRsp(IMGetMsgByIdRsp&& from) noexcept
    : IMGetMsgByIdRsp() {
    *this = ::std::move(from);
  }

  inline IMGetMsgByIdRsp& operator=(const IMGetMsgByIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetMsgByIdRsp& operator=(IMGetMsgByIdRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMGetMsgByIdRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMGetMsgByIdRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetMsgByIdRsp*>(
               &_IMGetMsgByIdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IMGetMsgByIdRsp& a, IMGetMsgByIdRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetMsgByIdRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetMsgByIdRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetMsgByIdRsp* New() const final {
    return new IMGetMsgByIdRsp();
  }

  IMGetMsgByIdRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetMsgByIdRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMGetMsgByIdRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMGetMsgByIdRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMGetMsgByIdRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMGetMsgByIdRsp";
  }
  protected:
  explicit IMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kSessionTypeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::IM::BaseDefine::MsgInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
      mutable_msg_list();
  private:
  const ::IM::BaseDefine::MsgInfo& _internal_msg_list(int index) const;
  ::IM::BaseDefine::MsgInfo* _internal_add_msg_list();
  public:
  const ::IM::BaseDefine::MsgInfo& msg_list(int index) const;
  ::IM::BaseDefine::MsgInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
      msg_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgByIdRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMMsgData

// uint32 from_user_id = 1;
inline void IMMsgData::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.from_user_id)
  return _internal_from_user_id();
}
inline void IMMsgData::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_user_id_ = value;
}
inline void IMMsgData::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.from_user_id)
}

// uint32 to_session_id = 2;
inline void IMMsgData::clear_to_session_id() {
  to_session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::_internal_to_session_id() const {
  return to_session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::to_session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.to_session_id)
  return _internal_to_session_id();
}
inline void IMMsgData::_internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_session_id_ = value;
}
inline void IMMsgData::set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.to_session_id)
}

// uint32 msg_id = 3;
inline void IMMsgData::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_id)
  return _internal_msg_id();
}
inline void IMMsgData::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void IMMsgData::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_id)
}

// uint32 create_time = 4;
inline void IMMsgData::clear_create_time() {
  create_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.create_time)
  return _internal_create_time();
}
inline void IMMsgData::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_time_ = value;
}
inline void IMMsgData::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.create_time)
}

// .IM.BaseDefine.MsgType msg_type = 5;
inline void IMMsgData::clear_msg_type() {
  msg_type_ = 0;
}
inline ::IM::BaseDefine::MsgType IMMsgData::_internal_msg_type() const {
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
inline ::IM::BaseDefine::MsgType IMMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_type)
  return _internal_msg_type();
}
inline void IMMsgData::_internal_set_msg_type(::IM::BaseDefine::MsgType value) {
  
  msg_type_ = value;
}
inline void IMMsgData::set_msg_type(::IM::BaseDefine::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_type)
}

// bytes msg_data = 6;
inline void IMMsgData::clear_msg_data() {
  msg_data_.ClearToEmpty();
}
inline const std::string& IMMsgData::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_data)
  return _internal_msg_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgData::set_msg_data(ArgT0&& arg0, ArgT... args) {
 
 msg_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_data)
}
inline std::string* IMMsgData::mutable_msg_data() {
  std::string* _s = _internal_mutable_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.msg_data)
  return _s;
}
inline const std::string& IMMsgData::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void IMMsgData::_internal_set_msg_data(const std::string& value) {
  
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgData::_internal_mutable_msg_data() {
  
  return msg_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgData::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.msg_data)
  return msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgData::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.msg_data)
}

// bytes attach_data = 20;
inline void IMMsgData::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMMsgData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMMsgData::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.attach_data)
}
inline std::string* IMMsgData::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.attach_data)
  return _s;
}
inline const std::string& IMMsgData::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMMsgData::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMMsgData::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMMsgData::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMMsgData::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.attach_data)
}

// -------------------------------------------------------------------

// IMMsgDataAck

// uint32 user_id = 1;
inline void IMMsgDataAck::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.user_id)
  return _internal_user_id();
}
inline void IMMsgDataAck::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMMsgDataAck::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.user_id)
}

// uint32 session_id = 2;
inline void IMMsgDataAck::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_id)
  return _internal_session_id();
}
inline void IMMsgDataAck::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMMsgDataAck::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_id)
}

// uint32 msg_id = 3;
inline void IMMsgDataAck::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.msg_id)
  return _internal_msg_id();
}
inline void IMMsgDataAck::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void IMMsgDataAck::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
inline void IMMsgDataAck::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMMsgDataAck::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMMsgDataAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_type)
  return _internal_session_type();
}
inline void IMMsgDataAck::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMMsgDataAck::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_type)
}

// -------------------------------------------------------------------

// IMMsgDataReadAck

// uint32 user_id = 1;
inline void IMMsgDataReadAck::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.user_id)
  return _internal_user_id();
}
inline void IMMsgDataReadAck::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMMsgDataReadAck::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.user_id)
}

// uint32 session_id = 2;
inline void IMMsgDataReadAck::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_id)
  return _internal_session_id();
}
inline void IMMsgDataReadAck::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMMsgDataReadAck::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_id)
}

// uint32 msg_id = 3;
inline void IMMsgDataReadAck::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.msg_id)
  return _internal_msg_id();
}
inline void IMMsgDataReadAck::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void IMMsgDataReadAck::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
inline void IMMsgDataReadAck::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMMsgDataReadAck::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMMsgDataReadAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_type)
  return _internal_session_type();
}
inline void IMMsgDataReadAck::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMMsgDataReadAck::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_type)
}

// -------------------------------------------------------------------

// IMMsgDataReadNotify

// uint32 user_id = 1;
inline void IMMsgDataReadNotify::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.user_id)
  return _internal_user_id();
}
inline void IMMsgDataReadNotify::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMMsgDataReadNotify::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.user_id)
}

// uint32 session_id = 2;
inline void IMMsgDataReadNotify::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_id)
  return _internal_session_id();
}
inline void IMMsgDataReadNotify::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMMsgDataReadNotify::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_id)
}

// uint32 msg_id = 3;
inline void IMMsgDataReadNotify::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataReadNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.msg_id)
  return _internal_msg_id();
}
inline void IMMsgDataReadNotify::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void IMMsgDataReadNotify::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
inline void IMMsgDataReadNotify::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMMsgDataReadNotify::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMMsgDataReadNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_type)
  return _internal_session_type();
}
inline void IMMsgDataReadNotify::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMMsgDataReadNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_type)
}

// -------------------------------------------------------------------

// IMClientTimeReq

// -------------------------------------------------------------------

// IMClientTimeRsp

// uint32 server_time = 1;
inline void IMClientTimeRsp::clear_server_time() {
  server_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMClientTimeRsp::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMClientTimeRsp::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMClientTimeRsp.server_time)
  return _internal_server_time();
}
inline void IMClientTimeRsp::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_time_ = value;
}
inline void IMClientTimeRsp::set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMClientTimeRsp.server_time)
}

// -------------------------------------------------------------------

// IMUnreadMsgCntReq

// uint32 user_id = 1;
inline void IMUnreadMsgCntReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.user_id)
  return _internal_user_id();
}
inline void IMUnreadMsgCntReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMUnreadMsgCntReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.user_id)
}

// bytes attach_data = 20;
inline void IMUnreadMsgCntReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMUnreadMsgCntReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMUnreadMsgCntReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.attach_data)
}
inline std::string* IMUnreadMsgCntReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntReq.attach_data)
  return _s;
}
inline const std::string& IMUnreadMsgCntReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUnreadMsgCntReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMUnreadMsgCntReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMUnreadMsgCntReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMUnreadMsgCntReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntReq.attach_data)
}

// -------------------------------------------------------------------

// IMUnreadMsgCntRsp

// uint32 user_id = 1;
inline void IMUnreadMsgCntRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.user_id)
  return _internal_user_id();
}
inline void IMUnreadMsgCntRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMUnreadMsgCntRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.user_id)
}

// uint32 total_cnt = 2;
inline void IMUnreadMsgCntRsp::clear_total_cnt() {
  total_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntRsp::_internal_total_cnt() const {
  return total_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUnreadMsgCntRsp::total_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.total_cnt)
  return _internal_total_cnt();
}
inline void IMUnreadMsgCntRsp::_internal_set_total_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_cnt_ = value;
}
inline void IMUnreadMsgCntRsp::set_total_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_cnt(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.total_cnt)
}

// repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
inline int IMUnreadMsgCntRsp::_internal_unreadinfo_list_size() const {
  return unreadinfo_list_.size();
}
inline int IMUnreadMsgCntRsp::unreadinfo_list_size() const {
  return _internal_unreadinfo_list_size();
}
inline ::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::mutable_unreadinfo_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
IMUnreadMsgCntRsp::mutable_unreadinfo_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return &unreadinfo_list_;
}
inline const ::IM::BaseDefine::UnreadInfo& IMUnreadMsgCntRsp::_internal_unreadinfo_list(int index) const {
  return unreadinfo_list_.Get(index);
}
inline const ::IM::BaseDefine::UnreadInfo& IMUnreadMsgCntRsp::unreadinfo_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return _internal_unreadinfo_list(index);
}
inline ::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::_internal_add_unreadinfo_list() {
  return unreadinfo_list_.Add();
}
inline ::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::add_unreadinfo_list() {
  ::IM::BaseDefine::UnreadInfo* _add = _internal_add_unreadinfo_list();
  // @@protoc_insertion_point(field_add:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
IMUnreadMsgCntRsp::unreadinfo_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_;
}

// bytes attach_data = 20;
inline void IMUnreadMsgCntRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMUnreadMsgCntRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMUnreadMsgCntRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
inline std::string* IMUnreadMsgCntRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return _s;
}
inline const std::string& IMUnreadMsgCntRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUnreadMsgCntRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMUnreadMsgCntRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMUnreadMsgCntRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMUnreadMsgCntRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetMsgListReq

// uint32 user_id = 1;
inline void IMGetMsgListReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.user_id)
  return _internal_user_id();
}
inline void IMGetMsgListReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetMsgListReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetMsgListReq::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetMsgListReq::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetMsgListReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_type)
  return _internal_session_type();
}
inline void IMGetMsgListReq::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetMsgListReq::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_type)
}

// uint32 session_id = 3;
inline void IMGetMsgListReq::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_id)
  return _internal_session_id();
}
inline void IMGetMsgListReq::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetMsgListReq::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_id)
}

// uint32 msg_id_begin = 4;
inline void IMGetMsgListReq::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::_internal_msg_id_begin() const {
  return msg_id_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_id_begin)
  return _internal_msg_id_begin();
}
inline void IMGetMsgListReq::_internal_set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_begin_ = value;
}
inline void IMGetMsgListReq::set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id_begin(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_id_begin)
}

// uint32 msg_cnt = 5;
inline void IMGetMsgListReq::clear_msg_cnt() {
  msg_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::_internal_msg_cnt() const {
  return msg_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListReq::msg_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_cnt)
  return _internal_msg_cnt();
}
inline void IMGetMsgListReq::_internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_cnt_ = value;
}
inline void IMGetMsgListReq::set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_cnt(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_cnt)
}

// bytes attach_data = 20;
inline void IMGetMsgListReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetMsgListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetMsgListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.attach_data)
}
inline std::string* IMGetMsgListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListReq.attach_data)
  return _s;
}
inline const std::string& IMGetMsgListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetMsgListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetMsgListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetMsgListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetMsgListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetMsgListRsp

// uint32 user_id = 1;
inline void IMGetMsgListRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.user_id)
  return _internal_user_id();
}
inline void IMGetMsgListRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetMsgListRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetMsgListRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetMsgListRsp::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetMsgListRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_type)
  return _internal_session_type();
}
inline void IMGetMsgListRsp::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetMsgListRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_type)
}

// uint32 session_id = 3;
inline void IMGetMsgListRsp::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_id)
  return _internal_session_id();
}
inline void IMGetMsgListRsp::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetMsgListRsp::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_id)
}

// uint32 msg_id_begin = 4;
inline void IMGetMsgListRsp::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::_internal_msg_id_begin() const {
  return msg_id_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgListRsp::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_id_begin)
  return _internal_msg_id_begin();
}
inline void IMGetMsgListRsp::_internal_set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_begin_ = value;
}
inline void IMGetMsgListRsp::set_msg_id_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id_begin(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.msg_id_begin)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 5;
inline int IMGetMsgListRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int IMGetMsgListRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgListRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgListRsp.msg_list)
  return &msg_list_;
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgListRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgListRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::add_msg_list() {
  ::IM::BaseDefine::MsgInfo* _add = _internal_add_msg_list();
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgListRsp.msg_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgListRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_;
}

// bytes attach_data = 20;
inline void IMGetMsgListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetMsgListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetMsgListRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.attach_data)
}
inline std::string* IMGetMsgListRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.attach_data)
  return _s;
}
inline const std::string& IMGetMsgListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetMsgListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetMsgListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetMsgListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetMsgListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetLatestMsgIdReq

// uint32 user_id = 1;
inline void IMGetLatestMsgIdReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.user_id)
  return _internal_user_id();
}
inline void IMGetLatestMsgIdReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetLatestMsgIdReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetLatestMsgIdReq::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetLatestMsgIdReq::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetLatestMsgIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_type)
  return _internal_session_type();
}
inline void IMGetLatestMsgIdReq::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetLatestMsgIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_type)
}

// uint32 session_id = 3;
inline void IMGetLatestMsgIdReq::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdReq::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_id)
  return _internal_session_id();
}
inline void IMGetLatestMsgIdReq::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetLatestMsgIdReq::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_id)
}

// bytes attach_data = 20;
inline void IMGetLatestMsgIdReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetLatestMsgIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetLatestMsgIdReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
inline std::string* IMGetLatestMsgIdReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return _s;
}
inline const std::string& IMGetLatestMsgIdReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetLatestMsgIdReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetLatestMsgIdReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetLatestMsgIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetLatestMsgIdReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetLatestMsgIdRsp

// uint32 user_id = 1;
inline void IMGetLatestMsgIdRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.user_id)
  return _internal_user_id();
}
inline void IMGetLatestMsgIdRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetLatestMsgIdRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetLatestMsgIdRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetLatestMsgIdRsp::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetLatestMsgIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_type)
  return _internal_session_type();
}
inline void IMGetLatestMsgIdRsp::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetLatestMsgIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_type)
}

// uint32 session_id = 3;
inline void IMGetLatestMsgIdRsp::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_id)
  return _internal_session_id();
}
inline void IMGetLatestMsgIdRsp::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetLatestMsgIdRsp::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_id)
}

// uint32 latest_msg_id = 4;
inline void IMGetLatestMsgIdRsp::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::_internal_latest_msg_id() const {
  return latest_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetLatestMsgIdRsp::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
  return _internal_latest_msg_id();
}
inline void IMGetLatestMsgIdRsp::_internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_msg_id_ = value;
}
inline void IMGetLatestMsgIdRsp::set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
}

// bytes attach_data = 20;
inline void IMGetLatestMsgIdRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetLatestMsgIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetLatestMsgIdRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
inline std::string* IMGetLatestMsgIdRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return _s;
}
inline const std::string& IMGetLatestMsgIdRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetLatestMsgIdRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetLatestMsgIdRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetLatestMsgIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetLatestMsgIdRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetMsgByIdReq

// uint32 user_id = 1;
inline void IMGetMsgByIdReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.user_id)
  return _internal_user_id();
}
inline void IMGetMsgByIdReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetMsgByIdReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetMsgByIdReq::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetMsgByIdReq::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetMsgByIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_type)
  return _internal_session_type();
}
inline void IMGetMsgByIdReq::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetMsgByIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_type)
}

// uint32 session_id = 3;
inline void IMGetMsgByIdReq::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_id)
  return _internal_session_id();
}
inline void IMGetMsgByIdReq::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetMsgByIdReq::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_id)
}

// repeated uint32 msg_id_list = 4;
inline int IMGetMsgByIdReq::_internal_msg_id_list_size() const {
  return msg_id_list_.size();
}
inline int IMGetMsgByIdReq::msg_id_list_size() const {
  return _internal_msg_id_list_size();
}
inline void IMGetMsgByIdReq::clear_msg_id_list() {
  msg_id_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::_internal_msg_id_list(int index) const {
  return msg_id_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdReq::msg_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return _internal_msg_id_list(index);
}
inline void IMGetMsgByIdReq::set_msg_id_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  msg_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
inline void IMGetMsgByIdReq::_internal_add_msg_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  msg_id_list_.Add(value);
}
inline void IMGetMsgByIdReq::add_msg_id_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_msg_id_list(value);
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGetMsgByIdReq::_internal_msg_id_list() const {
  return msg_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IMGetMsgByIdReq::msg_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return _internal_msg_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGetMsgByIdReq::_internal_mutable_msg_id_list() {
  return &msg_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IMGetMsgByIdReq::mutable_msg_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return _internal_mutable_msg_id_list();
}

// bytes attach_data = 20;
inline void IMGetMsgByIdReq::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetMsgByIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetMsgByIdReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.attach_data)
}
inline std::string* IMGetMsgByIdReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdReq.attach_data)
  return _s;
}
inline const std::string& IMGetMsgByIdReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetMsgByIdReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetMsgByIdReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetMsgByIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetMsgByIdReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetMsgByIdRsp

// uint32 user_id = 1;
inline void IMGetMsgByIdRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.user_id)
  return _internal_user_id();
}
inline void IMGetMsgByIdRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void IMGetMsgByIdRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMGetMsgByIdRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMGetMsgByIdRsp::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMGetMsgByIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_type)
  return _internal_session_type();
}
inline void IMGetMsgByIdRsp::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMGetMsgByIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_type)
}

// uint32 session_id = 3;
inline void IMGetMsgByIdRsp::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdRsp::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetMsgByIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_id)
  return _internal_session_id();
}
inline void IMGetMsgByIdRsp::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void IMGetMsgByIdRsp::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_id)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 4;
inline int IMGetMsgByIdRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int IMGetMsgByIdRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgByIdRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return &msg_list_;
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgByIdRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgByIdRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::add_msg_list() {
  ::IM::BaseDefine::MsgInfo* _add = _internal_add_msg_list();
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdRsp.msg_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgByIdRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_;
}

// bytes attach_data = 20;
inline void IMGetMsgByIdRsp::clear_attach_data() {
  attach_data_.ClearToEmpty();
}
inline const std::string& IMGetMsgByIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMGetMsgByIdRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 
 attach_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.attach_data)
}
inline std::string* IMGetMsgByIdRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.attach_data)
  return _s;
}
inline const std::string& IMGetMsgByIdRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetMsgByIdRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IMGetMsgByIdRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IMGetMsgByIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IMGetMsgByIdRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto
