// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.SwitchService.proto

#include "IM.SwitchService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IM {
namespace SwitchService {
constexpr IMP2PCmdMsg::IMP2PCmdMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cmd_msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_user_id_(0u)
  , to_user_id_(0u){}
struct IMP2PCmdMsgDefaultTypeInternal {
  constexpr IMP2PCmdMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMP2PCmdMsgDefaultTypeInternal() {}
  union {
    IMP2PCmdMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMP2PCmdMsgDefaultTypeInternal _IMP2PCmdMsg_default_instance_;
}  // namespace SwitchService
}  // namespace IM
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IM_2eSwitchService_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_IM_2eSwitchService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IM_2eSwitchService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IM_2eSwitchService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::SwitchService::IMP2PCmdMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::SwitchService::IMP2PCmdMsg, from_user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::SwitchService::IMP2PCmdMsg, to_user_id_),
  PROTOBUF_FIELD_OFFSET(::IM::SwitchService::IMP2PCmdMsg, cmd_msg_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IM::SwitchService::IMP2PCmdMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IM::SwitchService::_IMP2PCmdMsg_default_instance_),
};

const char descriptor_table_protodef_IM_2eSwitchService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026IM.SwitchService.proto\022\020IM.SwitchServi"
  "ce\"M\n\013IMP2PCmdMsg\022\024\n\014from_user_id\030\001 \001(\r\022"
  "\022\n\nto_user_id\030\002 \001(\r\022\024\n\014cmd_msg_data\030\003 \001("
  "\tB\031\n\027com.mogujie.tt.protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IM_2eSwitchService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eSwitchService_2eproto = {
  false, false, 156, descriptor_table_protodef_IM_2eSwitchService_2eproto, "IM.SwitchService.proto", 
  &descriptor_table_IM_2eSwitchService_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_IM_2eSwitchService_2eproto::offsets,
  file_level_metadata_IM_2eSwitchService_2eproto, file_level_enum_descriptors_IM_2eSwitchService_2eproto, file_level_service_descriptors_IM_2eSwitchService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_IM_2eSwitchService_2eproto_getter() {
  return &descriptor_table_IM_2eSwitchService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_IM_2eSwitchService_2eproto(&descriptor_table_IM_2eSwitchService_2eproto);
namespace IM {
namespace SwitchService {

// ===================================================================

class IMP2PCmdMsg::_Internal {
 public:
};

IMP2PCmdMsg::IMP2PCmdMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.SwitchService.IMP2PCmdMsg)
}
IMP2PCmdMsg::IMP2PCmdMsg(const IMP2PCmdMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd_msg_data().empty()) {
    cmd_msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cmd_msg_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.SwitchService.IMP2PCmdMsg)
}

void IMP2PCmdMsg::SharedCtor() {
cmd_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
}

IMP2PCmdMsg::~IMP2PCmdMsg() {
  // @@protoc_insertion_point(destructor:IM.SwitchService.IMP2PCmdMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMP2PCmdMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cmd_msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMP2PCmdMsg::ArenaDtor(void* object) {
  IMP2PCmdMsg* _this = reinterpret_cast< IMP2PCmdMsg* >(object);
  (void)_this;
}
void IMP2PCmdMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMP2PCmdMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMP2PCmdMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.SwitchService.IMP2PCmdMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_msg_data_.ClearToEmpty();
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_id_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(to_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMP2PCmdMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cmd_msg_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cmd_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IM.SwitchService.IMP2PCmdMsg.cmd_msg_data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMP2PCmdMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.SwitchService.IMP2PCmdMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string cmd_msg_data = 3;
  if (!this->_internal_cmd_msg_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_msg_data().data(), static_cast<int>(this->_internal_cmd_msg_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.SwitchService.IMP2PCmdMsg.cmd_msg_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cmd_msg_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.SwitchService.IMP2PCmdMsg)
  return target;
}

size_t IMP2PCmdMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.SwitchService.IMP2PCmdMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd_msg_data = 3;
  if (!this->_internal_cmd_msg_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_msg_data());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMP2PCmdMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMP2PCmdMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMP2PCmdMsg::GetClassData() const { return &_class_data_; }

void IMP2PCmdMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMP2PCmdMsg *>(to)->MergeFrom(
      static_cast<const IMP2PCmdMsg &>(from));
}


void IMP2PCmdMsg::MergeFrom(const IMP2PCmdMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.SwitchService.IMP2PCmdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd_msg_data().empty()) {
    _internal_set_cmd_msg_data(from._internal_cmd_msg_data());
  }
  if (from._internal_from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _internal_set_to_user_id(from._internal_to_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMP2PCmdMsg::CopyFrom(const IMP2PCmdMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.SwitchService.IMP2PCmdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP2PCmdMsg::IsInitialized() const {
  return true;
}

void IMP2PCmdMsg::InternalSwap(IMP2PCmdMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cmd_msg_data_, lhs_arena,
      &other->cmd_msg_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMP2PCmdMsg, to_user_id_)
      + sizeof(IMP2PCmdMsg::to_user_id_)
      - PROTOBUF_FIELD_OFFSET(IMP2PCmdMsg, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMP2PCmdMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IM_2eSwitchService_2eproto_getter, &descriptor_table_IM_2eSwitchService_2eproto_once,
      file_level_metadata_IM_2eSwitchService_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SwitchService
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::SwitchService::IMP2PCmdMsg* Arena::CreateMaybeMessage< ::IM::SwitchService::IMP2PCmdMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::SwitchService::IMP2PCmdMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
